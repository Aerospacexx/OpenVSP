# This file was automatically generated by SWIG (http://www.swig.org).
# Version 4.0.2
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
if _swig_python_version_info < (2, 7, 0):
    raise RuntimeError("Python 2.7 or later required")

# Import the low-level C/C++ module
# if __package__ or "." in __name__:
#     from . import _vsp_g
# else:
#     import _vsp_g

from openvsp.vsp_g import vec3d

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

# TOM STUFF
# **********************************************************************************
import os
import sys
import socket
from time import sleep
import subprocess
import pickle
HOST = 'localhost'
PORT = 6000

server_file = os.path.join(os.path.dirname(os.path.abspath(__file__)), 'vsp_server.py')
proc = subprocess.Popen(f'{sys.executable} {server_file}')

sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
sock.connect((HOST, PORT))

is_server = True
def test_wrap(func):
    def wrapper(*args, **kwargs):
           if is_server:
                return send_recieve(func.__name__, args, kwargs) #I think we might need something for kwargs
           else:
                func(*args, **kwargs)
    return wrapper

def send_recieve(func_name, args, kwargs):
    b_data = pickle.dumps([func_name, args, kwargs])
    # print(f"sent data: {[func_name, args, kwargs]}")
    sock.sendall(b_data)
    # b_result = self.sock.recv(1024)
    result = None
    b_result = []
    while True:
        # print("reading packet")
        packet = sock.recv(202400)
        if not packet: break
        b_result.append(packet)
        # print("packet recieved")
        try:
            result = pickle.loads(b"".join(b_result))
            try:
                new_result = []
                for r in result:
                    new_result.append(vec3d(r['x'],r['y'],r['z']))
                result = new_result
            except:
                pass
            break
        except:
            # print("here")
            pass
    # print("total recieved")
    # result = pickle.loads(b_result)
    return result

# **********************************************************************************


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "thisown":
            self.this.own(value)
        elif name == "this":
            set(self, name, value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)
# Import the low-level C/C++ module
if __package__ or "." in __name__:
    from . import _vsp_g
else:
    import _vsp_g

ABS = _vsp_g.ABS
REL = _vsp_g.REL
SELIG_AF_EXPORT = _vsp_g.SELIG_AF_EXPORT
BEZIER_AF_EXPORT = _vsp_g.BEZIER_AF_EXPORT
ANG_RAD = _vsp_g.ANG_RAD
ANG_DEG = _vsp_g.ANG_DEG
ATMOS_TYPE_US_STANDARD_1976 = _vsp_g.ATMOS_TYPE_US_STANDARD_1976
ATMOS_TYPE_HERRINGTON_1966 = _vsp_g.ATMOS_TYPE_HERRINGTON_1966
ATMOS_TYPE_MANUAL_P_R = _vsp_g.ATMOS_TYPE_MANUAL_P_R
ATMOS_TYPE_MANUAL_P_T = _vsp_g.ATMOS_TYPE_MANUAL_P_T
ATMOS_TYPE_MANUAL_R_T = _vsp_g.ATMOS_TYPE_MANUAL_R_T
ATMOS_TYPE_MANUAL_RE_L = _vsp_g.ATMOS_TYPE_MANUAL_RE_L
ATTACH_TRANS_NONE = _vsp_g.ATTACH_TRANS_NONE
ATTACH_TRANS_COMP = _vsp_g.ATTACH_TRANS_COMP
ATTACH_TRANS_UV = _vsp_g.ATTACH_TRANS_UV
ATTACH_ROT_NONE = _vsp_g.ATTACH_ROT_NONE
ATTACH_ROT_COMP = _vsp_g.ATTACH_ROT_COMP
ATTACH_ROT_UV = _vsp_g.ATTACH_ROT_UV
BOR_FLOWTHROUGH = _vsp_g.BOR_FLOWTHROUGH
BOR_UPPER = _vsp_g.BOR_UPPER
BOR_LOWER = _vsp_g.BOR_LOWER
BOR_NUM_MODES = _vsp_g.BOR_NUM_MODES
MAX_CAMB = _vsp_g.MAX_CAMB
DESIGN_CL = _vsp_g.DESIGN_CL
NO_END_CAP = _vsp_g.NO_END_CAP
FLAT_END_CAP = _vsp_g.FLAT_END_CAP
ROUND_END_CAP = _vsp_g.ROUND_END_CAP
EDGE_END_CAP = _vsp_g.EDGE_END_CAP
SHARP_END_CAP = _vsp_g.SHARP_END_CAP
POINT_END_CAP = _vsp_g.POINT_END_CAP
NUM_END_CAP_OPTIONS = _vsp_g.NUM_END_CAP_OPTIONS
CFD_MIN_EDGE_LEN = _vsp_g.CFD_MIN_EDGE_LEN
CFD_MAX_EDGE_LEN = _vsp_g.CFD_MAX_EDGE_LEN
CFD_MAX_GAP = _vsp_g.CFD_MAX_GAP
CFD_NUM_CIRCLE_SEGS = _vsp_g.CFD_NUM_CIRCLE_SEGS
CFD_GROWTH_RATIO = _vsp_g.CFD_GROWTH_RATIO
CFD_LIMIT_GROWTH_FLAG = _vsp_g.CFD_LIMIT_GROWTH_FLAG
CFD_INTERSECT_SUBSURFACE_FLAG = _vsp_g.CFD_INTERSECT_SUBSURFACE_FLAG
CFD_HALF_MESH_FLAG = _vsp_g.CFD_HALF_MESH_FLAG
CFD_FAR_FIELD_FLAG = _vsp_g.CFD_FAR_FIELD_FLAG
CFD_FAR_MAX_EDGE_LEN = _vsp_g.CFD_FAR_MAX_EDGE_LEN
CFD_FAR_MAX_GAP = _vsp_g.CFD_FAR_MAX_GAP
CFD_FAR_NUM_CIRCLE_SEGS = _vsp_g.CFD_FAR_NUM_CIRCLE_SEGS
CFD_FAR_SIZE_ABS_FLAG = _vsp_g.CFD_FAR_SIZE_ABS_FLAG
CFD_FAR_LENGTH = _vsp_g.CFD_FAR_LENGTH
CFD_FAR_WIDTH = _vsp_g.CFD_FAR_WIDTH
CFD_FAR_HEIGHT = _vsp_g.CFD_FAR_HEIGHT
CFD_FAR_X_SCALE = _vsp_g.CFD_FAR_X_SCALE
CFD_FAR_Y_SCALE = _vsp_g.CFD_FAR_Y_SCALE
CFD_FAR_Z_SCALE = _vsp_g.CFD_FAR_Z_SCALE
CFD_FAR_LOC_MAN_FLAG = _vsp_g.CFD_FAR_LOC_MAN_FLAG
CFD_FAR_LOC_X = _vsp_g.CFD_FAR_LOC_X
CFD_FAR_LOC_Y = _vsp_g.CFD_FAR_LOC_Y
CFD_FAR_LOC_Z = _vsp_g.CFD_FAR_LOC_Z
CFD_SRF_XYZ_FLAG = _vsp_g.CFD_SRF_XYZ_FLAG
CFD_STL_FILE_NAME = _vsp_g.CFD_STL_FILE_NAME
CFD_POLY_FILE_NAME = _vsp_g.CFD_POLY_FILE_NAME
CFD_TRI_FILE_NAME = _vsp_g.CFD_TRI_FILE_NAME
CFD_OBJ_FILE_NAME = _vsp_g.CFD_OBJ_FILE_NAME
CFD_DAT_FILE_NAME = _vsp_g.CFD_DAT_FILE_NAME
CFD_KEY_FILE_NAME = _vsp_g.CFD_KEY_FILE_NAME
CFD_GMSH_FILE_NAME = _vsp_g.CFD_GMSH_FILE_NAME
CFD_TKEY_FILE_NAME = _vsp_g.CFD_TKEY_FILE_NAME
CFD_FACET_FILE_NAME = _vsp_g.CFD_FACET_FILE_NAME
CFD_VSPGEOM_FILE_NAME = _vsp_g.CFD_VSPGEOM_FILE_NAME
CFD_NUM_FILE_NAMES = _vsp_g.CFD_NUM_FILE_NAMES
POINT_SOURCE = _vsp_g.POINT_SOURCE
LINE_SOURCE = _vsp_g.LINE_SOURCE
BOX_SOURCE = _vsp_g.BOX_SOURCE
ULINE_SOURCE = _vsp_g.ULINE_SOURCE
WLINE_SOURCE = _vsp_g.WLINE_SOURCE
NUM_SOURCE_TYPES = _vsp_g.NUM_SOURCE_TYPES
CF_LAM_BLASIUS = _vsp_g.CF_LAM_BLASIUS
CF_LAM_BLASIUS_W_HEAT = _vsp_g.CF_LAM_BLASIUS_W_HEAT
CF_TURB_EXPLICIT_FIT_SPALDING = _vsp_g.CF_TURB_EXPLICIT_FIT_SPALDING
CF_TURB_EXPLICIT_FIT_SPALDING_CHI = _vsp_g.CF_TURB_EXPLICIT_FIT_SPALDING_CHI
CF_TURB_EXPLICIT_FIT_SCHOENHERR = _vsp_g.CF_TURB_EXPLICIT_FIT_SCHOENHERR
DO_NOT_USE_CF_TURB_IMPLICIT_KARMAN = _vsp_g.DO_NOT_USE_CF_TURB_IMPLICIT_KARMAN
CF_TURB_IMPLICIT_SCHOENHERR = _vsp_g.CF_TURB_IMPLICIT_SCHOENHERR
CF_TURB_IMPLICIT_KARMAN_SCHOENHERR = _vsp_g.CF_TURB_IMPLICIT_KARMAN_SCHOENHERR
CF_TURB_POWER_LAW_BLASIUS = _vsp_g.CF_TURB_POWER_LAW_BLASIUS
CF_TURB_POWER_LAW_PRANDTL_LOW_RE = _vsp_g.CF_TURB_POWER_LAW_PRANDTL_LOW_RE
CF_TURB_POWER_LAW_PRANDTL_MEDIUM_RE = _vsp_g.CF_TURB_POWER_LAW_PRANDTL_MEDIUM_RE
CF_TURB_POWER_LAW_PRANDTL_HIGH_RE = _vsp_g.CF_TURB_POWER_LAW_PRANDTL_HIGH_RE
CF_TURB_SCHLICHTING_COMPRESSIBLE = _vsp_g.CF_TURB_SCHLICHTING_COMPRESSIBLE
DO_NOT_USE_CF_TURB_SCHLICHTING_INCOMPRESSIBLE = _vsp_g.DO_NOT_USE_CF_TURB_SCHLICHTING_INCOMPRESSIBLE
DO_NOT_USE_CF_TURB_SCHLICHTING_PRANDTL = _vsp_g.DO_NOT_USE_CF_TURB_SCHLICHTING_PRANDTL
DO_NOT_USE_CF_TURB_SCHULTZ_GRUNOW_HIGH_RE = _vsp_g.DO_NOT_USE_CF_TURB_SCHULTZ_GRUNOW_HIGH_RE
CF_TURB_SCHULTZ_GRUNOW_SCHOENHERR = _vsp_g.CF_TURB_SCHULTZ_GRUNOW_SCHOENHERR
DO_NOT_USE_CF_TURB_WHITE_CHRISTOPH_COMPRESSIBLE = _vsp_g.DO_NOT_USE_CF_TURB_WHITE_CHRISTOPH_COMPRESSIBLE
CF_TURB_ROUGHNESS_SCHLICHTING_AVG = _vsp_g.CF_TURB_ROUGHNESS_SCHLICHTING_AVG
DO_NOT_USE_CF_TURB_ROUGHNESS_SCHLICHTING_LOCAL = _vsp_g.DO_NOT_USE_CF_TURB_ROUGHNESS_SCHLICHTING_LOCAL
DO_NOT_USE_CF_TURB_ROUGHNESS_WHITE = _vsp_g.DO_NOT_USE_CF_TURB_ROUGHNESS_WHITE
CF_TURB_ROUGHNESS_SCHLICHTING_AVG_FLOW_CORRECTION = _vsp_g.CF_TURB_ROUGHNESS_SCHLICHTING_AVG_FLOW_CORRECTION
CF_TURB_HEATTRANSFER_WHITE_CHRISTOPH = _vsp_g.CF_TURB_HEATTRANSFER_WHITE_CHRISTOPH
CHEVRON_NONE = _vsp_g.CHEVRON_NONE
CHEVRON_PARTIAL = _vsp_g.CHEVRON_PARTIAL
CHEVRON_FULL = _vsp_g.CHEVRON_FULL
CHEVRON_NUM_TYPES = _vsp_g.CHEVRON_NUM_TYPES
CHEVRON_W01_SE = _vsp_g.CHEVRON_W01_SE
CHEVRON_W01_CW = _vsp_g.CHEVRON_W01_CW
CHEVRON_W01_NUM_MODES = _vsp_g.CHEVRON_W01_NUM_MODES
COLLISION_OK = _vsp_g.COLLISION_OK
COLLISION_INTERSECT_NO_SOLUTION = _vsp_g.COLLISION_INTERSECT_NO_SOLUTION
COLLISION_CLEAR_NO_SOLUTION = _vsp_g.COLLISION_CLEAR_NO_SOLUTION
NO_FILE_TYPE = _vsp_g.NO_FILE_TYPE
COMP_GEOM_TXT_TYPE = _vsp_g.COMP_GEOM_TXT_TYPE
COMP_GEOM_CSV_TYPE = _vsp_g.COMP_GEOM_CSV_TYPE
DRAG_BUILD_TSV_TYPE_DEPRECATED = _vsp_g.DRAG_BUILD_TSV_TYPE_DEPRECATED
SLICE_TXT_TYPE = _vsp_g.SLICE_TXT_TYPE
MASS_PROP_TXT_TYPE = _vsp_g.MASS_PROP_TXT_TYPE
DEGEN_GEOM_CSV_TYPE = _vsp_g.DEGEN_GEOM_CSV_TYPE
DEGEN_GEOM_M_TYPE = _vsp_g.DEGEN_GEOM_M_TYPE
CFD_STL_TYPE = _vsp_g.CFD_STL_TYPE
CFD_POLY_TYPE = _vsp_g.CFD_POLY_TYPE
CFD_TRI_TYPE = _vsp_g.CFD_TRI_TYPE
CFD_OBJ_TYPE = _vsp_g.CFD_OBJ_TYPE
CFD_DAT_TYPE = _vsp_g.CFD_DAT_TYPE
CFD_KEY_TYPE = _vsp_g.CFD_KEY_TYPE
CFD_GMSH_TYPE = _vsp_g.CFD_GMSH_TYPE
CFD_SRF_TYPE_DEPRECATED = _vsp_g.CFD_SRF_TYPE_DEPRECATED
CFD_TKEY_TYPE = _vsp_g.CFD_TKEY_TYPE
PROJ_AREA_CSV_TYPE = _vsp_g.PROJ_AREA_CSV_TYPE
WAVE_DRAG_TXT_TYPE = _vsp_g.WAVE_DRAG_TXT_TYPE
VSPAERO_PANEL_TRI_TYPE = _vsp_g.VSPAERO_PANEL_TRI_TYPE
DRAG_BUILD_CSV_TYPE = _vsp_g.DRAG_BUILD_CSV_TYPE
CFD_FACET_TYPE = _vsp_g.CFD_FACET_TYPE
CFD_CURV_TYPE_DEPRECATED = _vsp_g.CFD_CURV_TYPE_DEPRECATED
CFD_PLOT3D_TYPE_DEPRECATED = _vsp_g.CFD_PLOT3D_TYPE_DEPRECATED
CFD_VSPGEOM_TYPE = _vsp_g.CFD_VSPGEOM_TYPE
VSPAERO_VSPGEOM_TYPE = _vsp_g.VSPAERO_VSPGEOM_TYPE
DELIM_COMMA = _vsp_g.DELIM_COMMA
DELIM_USCORE = _vsp_g.DELIM_USCORE
DELIM_SPACE = _vsp_g.DELIM_SPACE
DELIM_NONE = _vsp_g.DELIM_NONE
DELIM_NUM_TYPES = _vsp_g.DELIM_NUM_TYPES
SET_3D = _vsp_g.SET_3D
SET_2D = _vsp_g.SET_2D
X_DIR = _vsp_g.X_DIR
Y_DIR = _vsp_g.Y_DIR
Z_DIR = _vsp_g.Z_DIR
ALL_DIR = _vsp_g.ALL_DIR
DISPLAY_BEZIER = _vsp_g.DISPLAY_BEZIER
DISPLAY_DEGEN_SURF = _vsp_g.DISPLAY_DEGEN_SURF
DISPLAY_DEGEN_PLATE = _vsp_g.DISPLAY_DEGEN_PLATE
DISPLAY_DEGEN_CAMBER = _vsp_g.DISPLAY_DEGEN_CAMBER
GEOM_DRAW_WIRE = _vsp_g.GEOM_DRAW_WIRE
GEOM_DRAW_HIDDEN = _vsp_g.GEOM_DRAW_HIDDEN
GEOM_DRAW_SHADE = _vsp_g.GEOM_DRAW_SHADE
GEOM_DRAW_TEXTURE = _vsp_g.GEOM_DRAW_TEXTURE
GEOM_DRAW_NONE = _vsp_g.GEOM_DRAW_NONE
VSP_OK = _vsp_g.VSP_OK
VSP_INVALID_PTR = _vsp_g.VSP_INVALID_PTR
VSP_INVALID_TYPE = _vsp_g.VSP_INVALID_TYPE
VSP_CANT_FIND_TYPE = _vsp_g.VSP_CANT_FIND_TYPE
VSP_CANT_FIND_PARM = _vsp_g.VSP_CANT_FIND_PARM
VSP_CANT_FIND_NAME = _vsp_g.VSP_CANT_FIND_NAME
VSP_INVALID_GEOM_ID = _vsp_g.VSP_INVALID_GEOM_ID
VSP_FILE_DOES_NOT_EXIST = _vsp_g.VSP_FILE_DOES_NOT_EXIST
VSP_FILE_WRITE_FAILURE = _vsp_g.VSP_FILE_WRITE_FAILURE
VSP_FILE_READ_FAILURE = _vsp_g.VSP_FILE_READ_FAILURE
VSP_WRONG_XSEC_TYPE = _vsp_g.VSP_WRONG_XSEC_TYPE
VSP_WRONG_FILE_TYPE = _vsp_g.VSP_WRONG_FILE_TYPE
VSP_INDEX_OUT_RANGE = _vsp_g.VSP_INDEX_OUT_RANGE
VSP_INVALID_XSEC_ID = _vsp_g.VSP_INVALID_XSEC_ID
VSP_INVALID_ID = _vsp_g.VSP_INVALID_ID
VSP_CANT_SET_NOT_EQ_PARM = _vsp_g.VSP_CANT_SET_NOT_EQ_PARM
VSP_AMBIGUOUS_SUBSURF = _vsp_g.VSP_AMBIGUOUS_SUBSURF
VSP_INVALID_VARPRESET_SETNAME = _vsp_g.VSP_INVALID_VARPRESET_SETNAME
VSP_INVALID_VARPRESET_GROUPNAME = _vsp_g.VSP_INVALID_VARPRESET_GROUPNAME
VSP_CONFORMAL_PARENT_UNSUPPORTED = _vsp_g.VSP_CONFORMAL_PARENT_UNSUPPORTED
VSP_UNEXPECTED_RESET_REMAP_ID = _vsp_g.VSP_UNEXPECTED_RESET_REMAP_ID
VSP_INVALID_INPUT_VAL = _vsp_g.VSP_INVALID_INPUT_VAL
VSP_INVALID_CF_EQN = _vsp_g.VSP_INVALID_CF_EQN
VSP_INVALID_DRIVERS = _vsp_g.VSP_INVALID_DRIVERS
VSP_ADV_LINK_BUILD_FAIL = _vsp_g.VSP_ADV_LINK_BUILD_FAIL
VSP_DEPRECATED = _vsp_g.VSP_DEPRECATED
EXCRESCENCE_COUNT = _vsp_g.EXCRESCENCE_COUNT
EXCRESCENCE_CD = _vsp_g.EXCRESCENCE_CD
EXCRESCENCE_PERCENT_GEOM = _vsp_g.EXCRESCENCE_PERCENT_GEOM
EXCRESCENCE_MARGIN = _vsp_g.EXCRESCENCE_MARGIN
EXCRESCENCE_DRAGAREA = _vsp_g.EXCRESCENCE_DRAGAREA
EXPORT_FELISA = _vsp_g.EXPORT_FELISA
EXPORT_XSEC = _vsp_g.EXPORT_XSEC
EXPORT_STL = _vsp_g.EXPORT_STL
EXPORT_AWAVE = _vsp_g.EXPORT_AWAVE
EXPORT_NASCART = _vsp_g.EXPORT_NASCART
EXPORT_POVRAY = _vsp_g.EXPORT_POVRAY
EXPORT_CART3D = _vsp_g.EXPORT_CART3D
EXPORT_VSPGEOM = _vsp_g.EXPORT_VSPGEOM
EXPORT_VORXSEC = _vsp_g.EXPORT_VORXSEC
EXPORT_XSECGEOM = _vsp_g.EXPORT_XSECGEOM
EXPORT_GMSH = _vsp_g.EXPORT_GMSH
EXPORT_X3D = _vsp_g.EXPORT_X3D
EXPORT_STEP = _vsp_g.EXPORT_STEP
EXPORT_PLOT3D = _vsp_g.EXPORT_PLOT3D
EXPORT_IGES = _vsp_g.EXPORT_IGES
EXPORT_BEM = _vsp_g.EXPORT_BEM
EXPORT_DXF = _vsp_g.EXPORT_DXF
EXPORT_FACET = _vsp_g.EXPORT_FACET
EXPORT_SVG = _vsp_g.EXPORT_SVG
EXPORT_PMARC = _vsp_g.EXPORT_PMARC
EXPORT_OBJ = _vsp_g.EXPORT_OBJ
EXPORT_SELIG_AIRFOIL = _vsp_g.EXPORT_SELIG_AIRFOIL
EXPORT_BEZIER_AIRFOIL = _vsp_g.EXPORT_BEZIER_AIRFOIL
EXPORT_IGES_STRUCTURE = _vsp_g.EXPORT_IGES_STRUCTURE
EXPORT_STEP_STRUCTURE = _vsp_g.EXPORT_STEP_STRUCTURE
FEA_BC_STRUCTURE = _vsp_g.FEA_BC_STRUCTURE
FEA_BC_PART = _vsp_g.FEA_BC_PART
FEA_BC_SUBSURF = _vsp_g.FEA_BC_SUBSURF
FEA_NUM_BC_TYPES = _vsp_g.FEA_NUM_BC_TYPES
FEA_BCM_USER = _vsp_g.FEA_BCM_USER
FEA_BCM_ALL = _vsp_g.FEA_BCM_ALL
FEA_BCM_PIN = _vsp_g.FEA_BCM_PIN
FEA_BCM_SYMM = _vsp_g.FEA_BCM_SYMM
FEA_BCM_ASYMM = _vsp_g.FEA_BCM_ASYMM
FEA_NUM_BCM_MODES = _vsp_g.FEA_NUM_BCM_MODES
FEA_XSEC_GENERAL = _vsp_g.FEA_XSEC_GENERAL
FEA_XSEC_CIRC = _vsp_g.FEA_XSEC_CIRC
FEA_XSEC_PIPE = _vsp_g.FEA_XSEC_PIPE
FEA_XSEC_I = _vsp_g.FEA_XSEC_I
FEA_XSEC_RECT = _vsp_g.FEA_XSEC_RECT
FEA_XSEC_BOX = _vsp_g.FEA_XSEC_BOX
FEA_MASS_FILE_NAME = _vsp_g.FEA_MASS_FILE_NAME
FEA_NASTRAN_FILE_NAME = _vsp_g.FEA_NASTRAN_FILE_NAME
FEA_NKEY_FILE_NAME = _vsp_g.FEA_NKEY_FILE_NAME
FEA_CALCULIX_FILE_NAME = _vsp_g.FEA_CALCULIX_FILE_NAME
FEA_STL_FILE_NAME = _vsp_g.FEA_STL_FILE_NAME
FEA_GMSH_FILE_NAME = _vsp_g.FEA_GMSH_FILE_NAME
FEA_SRF_FILE_NAME = _vsp_g.FEA_SRF_FILE_NAME
FEA_CURV_FILE_NAME = _vsp_g.FEA_CURV_FILE_NAME
FEA_PLOT3D_FILE_NAME = _vsp_g.FEA_PLOT3D_FILE_NAME
FEA_IGES_FILE_NAME = _vsp_g.FEA_IGES_FILE_NAME
FEA_STEP_FILE_NAME = _vsp_g.FEA_STEP_FILE_NAME
FEA_NUM_FILE_NAMES = _vsp_g.FEA_NUM_FILE_NAMES
FEA_ISOTROPIC = _vsp_g.FEA_ISOTROPIC
FEA_ENG_ORTHO = _vsp_g.FEA_ENG_ORTHO
FEA_NUM_MAT_TYPES = _vsp_g.FEA_NUM_MAT_TYPES
FEA_ORIENT_GLOBAL_X = _vsp_g.FEA_ORIENT_GLOBAL_X
FEA_ORIENT_GLOBAL_Y = _vsp_g.FEA_ORIENT_GLOBAL_Y
FEA_ORIENT_GLOBAL_Z = _vsp_g.FEA_ORIENT_GLOBAL_Z
FEA_ORIENT_COMP_X = _vsp_g.FEA_ORIENT_COMP_X
FEA_ORIENT_COMP_Y = _vsp_g.FEA_ORIENT_COMP_Y
FEA_ORIENT_COMP_Z = _vsp_g.FEA_ORIENT_COMP_Z
FEA_ORIENT_PART_U = _vsp_g.FEA_ORIENT_PART_U
FEA_ORIENT_PART_V = _vsp_g.FEA_ORIENT_PART_V
FEA_ORIENT_OML_U = _vsp_g.FEA_ORIENT_OML_U
FEA_ORIENT_OML_V = _vsp_g.FEA_ORIENT_OML_V
FEA_ORIENT_OML_R = _vsp_g.FEA_ORIENT_OML_R
FEA_ORIENT_OML_S = _vsp_g.FEA_ORIENT_OML_S
FEA_ORIENT_OML_T = _vsp_g.FEA_ORIENT_OML_T
FEA_NUM_ORIENT_TYPES = _vsp_g.FEA_NUM_ORIENT_TYPES
FEA_SHELL = _vsp_g.FEA_SHELL
FEA_BEAM = _vsp_g.FEA_BEAM
FEA_SHELL_AND_BEAM = _vsp_g.FEA_SHELL_AND_BEAM
FEA_NO_ELEMENTS = _vsp_g.FEA_NO_ELEMENTS
FEA_NUM_ELEMENT_TYPES = _vsp_g.FEA_NUM_ELEMENT_TYPES
FEA_SLICE = _vsp_g.FEA_SLICE
FEA_RIB = _vsp_g.FEA_RIB
FEA_SPAR = _vsp_g.FEA_SPAR
FEA_FIX_POINT = _vsp_g.FEA_FIX_POINT
FEA_DOME = _vsp_g.FEA_DOME
FEA_RIB_ARRAY = _vsp_g.FEA_RIB_ARRAY
FEA_SLICE_ARRAY = _vsp_g.FEA_SLICE_ARRAY
FEA_SKIN = _vsp_g.FEA_SKIN
FEA_TRIM = _vsp_g.FEA_TRIM
FEA_NUM_TYPES = _vsp_g.FEA_NUM_TYPES
XY_BODY = _vsp_g.XY_BODY
YZ_BODY = _vsp_g.YZ_BODY
XZ_BODY = _vsp_g.XZ_BODY
XY_ABS = _vsp_g.XY_ABS
YZ_ABS = _vsp_g.YZ_ABS
XZ_ABS = _vsp_g.XZ_ABS
SPINE_NORMAL = _vsp_g.SPINE_NORMAL
SI_UNIT = _vsp_g.SI_UNIT
CGS_UNIT = _vsp_g.CGS_UNIT
MPA_UNIT = _vsp_g.MPA_UNIT
BFT_UNIT = _vsp_g.BFT_UNIT
BIN_UNIT = _vsp_g.BIN_UNIT
NO_NORMAL = _vsp_g.NO_NORMAL
LE_NORMAL = _vsp_g.LE_NORMAL
TE_NORMAL = _vsp_g.TE_NORMAL
SPAR_NORMAL = _vsp_g.SPAR_NORMAL
FF_B_MANUAL = _vsp_g.FF_B_MANUAL
FF_B_SCHEMENSKY_FUSE = _vsp_g.FF_B_SCHEMENSKY_FUSE
FF_B_SCHEMENSKY_NACELLE = _vsp_g.FF_B_SCHEMENSKY_NACELLE
FF_B_HOERNER_STREAMBODY = _vsp_g.FF_B_HOERNER_STREAMBODY
FF_B_TORENBEEK = _vsp_g.FF_B_TORENBEEK
FF_B_SHEVELL = _vsp_g.FF_B_SHEVELL
FF_B_COVERT = _vsp_g.FF_B_COVERT
FF_B_JENKINSON_FUSE = _vsp_g.FF_B_JENKINSON_FUSE
FF_B_JENKINSON_WING_NACELLE = _vsp_g.FF_B_JENKINSON_WING_NACELLE
FF_B_JENKINSON_AFT_FUSE_NACELLE = _vsp_g.FF_B_JENKINSON_AFT_FUSE_NACELLE
FF_W_MANUAL = _vsp_g.FF_W_MANUAL
FF_W_EDET_CONV = _vsp_g.FF_W_EDET_CONV
FF_W_EDET_ADV = _vsp_g.FF_W_EDET_ADV
FF_W_HOERNER = _vsp_g.FF_W_HOERNER
FF_W_COVERT = _vsp_g.FF_W_COVERT
FF_W_SHEVELL = _vsp_g.FF_W_SHEVELL
FF_W_KROO = _vsp_g.FF_W_KROO
FF_W_TORENBEEK = _vsp_g.FF_W_TORENBEEK
FF_W_DATCOM = _vsp_g.FF_W_DATCOM
FF_W_SCHEMENSKY_6_SERIES_AF = _vsp_g.FF_W_SCHEMENSKY_6_SERIES_AF
FF_W_SCHEMENSKY_4_SERIES_AF = _vsp_g.FF_W_SCHEMENSKY_4_SERIES_AF
FF_W_JENKINSON_WING = _vsp_g.FF_W_JENKINSON_WING
FF_W_JENKINSON_TAIL = _vsp_g.FF_W_JENKINSON_TAIL
FF_W_SCHEMENSKY_SUPERCRITICAL_AF = _vsp_g.FF_W_SCHEMENSKY_SUPERCRITICAL_AF
PD_UNITS_IMPERIAL = _vsp_g.PD_UNITS_IMPERIAL
PD_UNITS_METRIC = _vsp_g.PD_UNITS_METRIC
MALE = _vsp_g.MALE
FEMALE = _vsp_g.FEMALE
EDIT_XSEC_CIRCLE = _vsp_g.EDIT_XSEC_CIRCLE
EDIT_XSEC_ELLIPSE = _vsp_g.EDIT_XSEC_ELLIPSE
EDIT_XSEC_RECTANGLE = _vsp_g.EDIT_XSEC_RECTANGLE
IMPORT_STL = _vsp_g.IMPORT_STL
IMPORT_NASCART = _vsp_g.IMPORT_NASCART
IMPORT_CART3D_TRI = _vsp_g.IMPORT_CART3D_TRI
IMPORT_XSEC_MESH = _vsp_g.IMPORT_XSEC_MESH
IMPORT_PTS = _vsp_g.IMPORT_PTS
IMPORT_V2 = _vsp_g.IMPORT_V2
IMPORT_BEM = _vsp_g.IMPORT_BEM
IMPORT_XSEC_WIRE = _vsp_g.IMPORT_XSEC_WIRE
IMPORT_P3D_WIRE = _vsp_g.IMPORT_P3D_WIRE
INTERSECT_SRF_FILE_NAME = _vsp_g.INTERSECT_SRF_FILE_NAME
INTERSECT_CURV_FILE_NAME = _vsp_g.INTERSECT_CURV_FILE_NAME
INTERSECT_PLOT3D_FILE_NAME = _vsp_g.INTERSECT_PLOT3D_FILE_NAME
INTERSECT_IGES_FILE_NAME = _vsp_g.INTERSECT_IGES_FILE_NAME
INTERSECT_STEP_FILE_NAME = _vsp_g.INTERSECT_STEP_FILE_NAME
INTERSECT_NUM_FILE_NAMES = _vsp_g.INTERSECT_NUM_FILE_NAMES
LEN_MM = _vsp_g.LEN_MM
LEN_CM = _vsp_g.LEN_CM
LEN_M = _vsp_g.LEN_M
LEN_IN = _vsp_g.LEN_IN
LEN_FT = _vsp_g.LEN_FT
LEN_YD = _vsp_g.LEN_YD
LEN_UNITLESS = _vsp_g.LEN_UNITLESS
MASS_UNIT_G = _vsp_g.MASS_UNIT_G
MASS_UNIT_KG = _vsp_g.MASS_UNIT_KG
MASS_UNIT_TONNE = _vsp_g.MASS_UNIT_TONNE
MASS_UNIT_LBM = _vsp_g.MASS_UNIT_LBM
MASS_UNIT_SLUG = _vsp_g.MASS_UNIT_SLUG
MASS_LBFSEC2IN = _vsp_g.MASS_LBFSEC2IN
PARM_DOUBLE_TYPE = _vsp_g.PARM_DOUBLE_TYPE
PARM_INT_TYPE = _vsp_g.PARM_INT_TYPE
PARM_BOOL_TYPE = _vsp_g.PARM_BOOL_TYPE
PARM_FRACTION_TYPE = _vsp_g.PARM_FRACTION_TYPE
PARM_LIMITED_INT_TYPE = _vsp_g.PARM_LIMITED_INT_TYPE
PARM_NOTEQ_TYPE = _vsp_g.PARM_NOTEQ_TYPE
PARM_POWER_INT_TYPE = _vsp_g.PARM_POWER_INT_TYPE
PATCH_NONE = _vsp_g.PATCH_NONE
PATCH_POINT = _vsp_g.PATCH_POINT
PATCH_LINE = _vsp_g.PATCH_LINE
PATCH_COPY = _vsp_g.PATCH_COPY
PATCH_HALFWAY = _vsp_g.PATCH_HALFWAY
PATCH_NUM_TYPES = _vsp_g.PATCH_NUM_TYPES
LINEAR = _vsp_g.LINEAR
PCHIP = _vsp_g.PCHIP
CEDIT = _vsp_g.CEDIT
APPROX_CEDIT = _vsp_g.APPROX_CEDIT
NUM_PCURV_TYPE = _vsp_g.NUM_PCURV_TYPE
PRES_UNIT_PSF = _vsp_g.PRES_UNIT_PSF
PRES_UNIT_PSI = _vsp_g.PRES_UNIT_PSI
PRES_UNIT_BA = _vsp_g.PRES_UNIT_BA
PRES_UNIT_PA = _vsp_g.PRES_UNIT_PA
PRES_UNIT_KPA = _vsp_g.PRES_UNIT_KPA
PRES_UNIT_MPA = _vsp_g.PRES_UNIT_MPA
PRES_UNIT_INCHHG = _vsp_g.PRES_UNIT_INCHHG
PRES_UNIT_MMHG = _vsp_g.PRES_UNIT_MMHG
PRES_UNIT_MMH20 = _vsp_g.PRES_UNIT_MMH20
PRES_UNIT_MB = _vsp_g.PRES_UNIT_MB
PRES_UNIT_ATM = _vsp_g.PRES_UNIT_ATM
NO_BOUNDARY = _vsp_g.NO_BOUNDARY
SET_BOUNDARY = _vsp_g.SET_BOUNDARY
GEOM_BOUNDARY = _vsp_g.GEOM_BOUNDARY
NUM_PROJ_BNDY_OPTIONS = _vsp_g.NUM_PROJ_BNDY_OPTIONS
X_PROJ = _vsp_g.X_PROJ
Y_PROJ = _vsp_g.Y_PROJ
Z_PROJ = _vsp_g.Z_PROJ
GEOM_PROJ = _vsp_g.GEOM_PROJ
VEC_PROJ = _vsp_g.VEC_PROJ
NUM_PROJ_DIR_OPTIONS = _vsp_g.NUM_PROJ_DIR_OPTIONS
SET_TARGET = _vsp_g.SET_TARGET
GEOM_TARGET = _vsp_g.GEOM_TARGET
NUM_PROJ_TGT_OPTIONS = _vsp_g.NUM_PROJ_TGT_OPTIONS
PROP_BLADES = _vsp_g.PROP_BLADES
PROP_BOTH = _vsp_g.PROP_BOTH
PROP_DISK = _vsp_g.PROP_DISK
PROP_CHORD = _vsp_g.PROP_CHORD
PROP_TWIST = _vsp_g.PROP_TWIST
PROP_RAKE = _vsp_g.PROP_RAKE
PROP_SKEW = _vsp_g.PROP_SKEW
PROP_SWEEP = _vsp_g.PROP_SWEEP
PROP_THICK = _vsp_g.PROP_THICK
PROP_CLI = _vsp_g.PROP_CLI
PROP_AXIAL = _vsp_g.PROP_AXIAL
PROP_TANGENTIAL = _vsp_g.PROP_TANGENTIAL
NUM_PROP_PCURVE = _vsp_g.NUM_PROP_PCURVE
MANUAL_REF = _vsp_g.MANUAL_REF
COMPONENT_REF = _vsp_g.COMPONENT_REF
NUM_REF_TYPES = _vsp_g.NUM_REF_TYPES
INVALID_TYPE = _vsp_g.INVALID_TYPE
INT_DATA = _vsp_g.INT_DATA
DOUBLE_DATA = _vsp_g.DOUBLE_DATA
STRING_DATA = _vsp_g.STRING_DATA
VEC3D_DATA = _vsp_g.VEC3D_DATA
DOUBLE_MATRIX_DATA = _vsp_g.DOUBLE_MATRIX_DATA
MESH_INDEXED_TRI = _vsp_g.MESH_INDEXED_TRI
MESH_SLICE_TRI = _vsp_g.MESH_SLICE_TRI
GEOM_XSECS = _vsp_g.GEOM_XSECS
MESH_INDEX_AND_SLICE_TRI = _vsp_g.MESH_INDEX_AND_SLICE_TRI
RHO_UNIT_SLUG_FT3 = _vsp_g.RHO_UNIT_SLUG_FT3
RHO_UNIT_G_CM3 = _vsp_g.RHO_UNIT_G_CM3
RHO_UNIT_KG_M3 = _vsp_g.RHO_UNIT_KG_M3
RHO_UNIT_TONNE_MM3 = _vsp_g.RHO_UNIT_TONNE_MM3
RHO_UNIT_LBF_FT3 = _vsp_g.RHO_UNIT_LBF_FT3
RHO_UNIT_LBFSEC2_IN4 = _vsp_g.RHO_UNIT_LBFSEC2_IN4
SET_NONE = _vsp_g.SET_NONE
SET_ALL = _vsp_g.SET_ALL
SET_SHOWN = _vsp_g.SET_SHOWN
SET_NOT_SHOWN = _vsp_g.SET_NOT_SHOWN
SET_FIRST_USER = _vsp_g.SET_FIRST_USER
STEP_SHELL = _vsp_g.STEP_SHELL
STEP_BREP = _vsp_g.STEP_BREP
SS_INC_TREAT_AS_PARENT = _vsp_g.SS_INC_TREAT_AS_PARENT
SS_INC_SEPARATE_TREATMENT = _vsp_g.SS_INC_SEPARATE_TREATMENT
SS_INC_ZERO_DRAG = _vsp_g.SS_INC_ZERO_DRAG
INSIDE = _vsp_g.INSIDE
OUTSIDE = _vsp_g.OUTSIDE
NONE = _vsp_g.NONE
CONST_U = _vsp_g.CONST_U
CONST_W = _vsp_g.CONST_W
SS_LINE = _vsp_g.SS_LINE
SS_RECTANGLE = _vsp_g.SS_RECTANGLE
SS_ELLIPSE = _vsp_g.SS_ELLIPSE
SS_CONTROL = _vsp_g.SS_CONTROL
SS_LINE_ARRAY = _vsp_g.SS_LINE_ARRAY
SS_FINITE_LINE = _vsp_g.SS_FINITE_LINE
SS_NUM_TYPES = _vsp_g.SS_NUM_TYPES
SYM_XY = _vsp_g.SYM_XY
SYM_XZ = _vsp_g.SYM_XZ
SYM_YZ = _vsp_g.SYM_YZ
SYM_ROT_X = _vsp_g.SYM_ROT_X
SYM_ROT_Y = _vsp_g.SYM_ROT_Y
SYM_ROT_Z = _vsp_g.SYM_ROT_Z
SYM_PLANAR_TYPES = _vsp_g.SYM_PLANAR_TYPES
SYM_NUM_TYPES = _vsp_g.SYM_NUM_TYPES
SYM_NONE = _vsp_g.SYM_NONE
SYM_RL = _vsp_g.SYM_RL
SYM_TB = _vsp_g.SYM_TB
SYM_ALL = _vsp_g.SYM_ALL
TEMP_UNIT_K = _vsp_g.TEMP_UNIT_K
TEMP_UNIT_C = _vsp_g.TEMP_UNIT_C
TEMP_UNIT_F = _vsp_g.TEMP_UNIT_F
TEMP_UNIT_R = _vsp_g.TEMP_UNIT_R
V_UNIT_FT_S = _vsp_g.V_UNIT_FT_S
V_UNIT_M_S = _vsp_g.V_UNIT_M_S
V_UNIT_MPH = _vsp_g.V_UNIT_MPH
V_UNIT_KM_HR = _vsp_g.V_UNIT_KM_HR
V_UNIT_KEAS = _vsp_g.V_UNIT_KEAS
V_UNIT_KTAS = _vsp_g.V_UNIT_KTAS
V_UNIT_MACH = _vsp_g.V_UNIT_MACH
VIEW_1 = _vsp_g.VIEW_1
VIEW_2HOR = _vsp_g.VIEW_2HOR
VIEW_2VER = _vsp_g.VIEW_2VER
VIEW_4 = _vsp_g.VIEW_4
ROT_0 = _vsp_g.ROT_0
ROT_90 = _vsp_g.ROT_90
ROT_180 = _vsp_g.ROT_180
ROT_270 = _vsp_g.ROT_270
VIEW_LEFT = _vsp_g.VIEW_LEFT
VIEW_RIGHT = _vsp_g.VIEW_RIGHT
VIEW_TOP = _vsp_g.VIEW_TOP
VIEW_BOTTOM = _vsp_g.VIEW_BOTTOM
VIEW_FRONT = _vsp_g.VIEW_FRONT
VIEW_REAR = _vsp_g.VIEW_REAR
VIEW_NONE = _vsp_g.VIEW_NONE
VIEW_NUM_TYPES = _vsp_g.VIEW_NUM_TYPES
VORTEX_LATTICE = _vsp_g.VORTEX_LATTICE
PANEL = _vsp_g.PANEL
NOISE_FLYBY = _vsp_g.NOISE_FLYBY
NOISE_FOOTPRINT = _vsp_g.NOISE_FOOTPRINT
NOISE_STEADY = _vsp_g.NOISE_STEADY
NOISE_SI = _vsp_g.NOISE_SI
NOISE_ENGLISH = _vsp_g.NOISE_ENGLISH
PRECON_MATRIX = _vsp_g.PRECON_MATRIX
PRECON_JACOBI = _vsp_g.PRECON_JACOBI
PRECON_SSOR = _vsp_g.PRECON_SSOR
STABILITY_OFF = _vsp_g.STABILITY_OFF
STABILITY_DEFAULT = _vsp_g.STABILITY_DEFAULT
STABILITY_P_ANALYSIS = _vsp_g.STABILITY_P_ANALYSIS
STABILITY_Q_ANALYSIS = _vsp_g.STABILITY_Q_ANALYSIS
STABILITY_R_ANALYSIS = _vsp_g.STABILITY_R_ANALYSIS
STABILITY_PITCH = _vsp_g.STABILITY_PITCH
STABILITY_NUM_TYPES = _vsp_g.STABILITY_NUM_TYPES
CLMAX_OFF = _vsp_g.CLMAX_OFF
CLMAX_2D = _vsp_g.CLMAX_2D
CLMAX_CARLSON = _vsp_g.CLMAX_CARLSON
CFD_NORMAL = _vsp_g.CFD_NORMAL
CFD_NEGATIVE = _vsp_g.CFD_NEGATIVE
CFD_TRANSPARENT = _vsp_g.CFD_TRANSPARENT
CFD_STRUCTURE = _vsp_g.CFD_STRUCTURE
CFD_STIFFENER = _vsp_g.CFD_STIFFENER
CFD_NUM_TYPES = _vsp_g.CFD_NUM_TYPES
NORMAL_SURF = _vsp_g.NORMAL_SURF
WING_SURF = _vsp_g.WING_SURF
DISK_SURF = _vsp_g.DISK_SURF
PROP_SURF = _vsp_g.PROP_SURF
NUM_SURF_TYPES = _vsp_g.NUM_SURF_TYPES
W_RIGHT_0 = _vsp_g.W_RIGHT_0
W_BOTTOM = _vsp_g.W_BOTTOM
W_LEFT = _vsp_g.W_LEFT
W_TOP = _vsp_g.W_TOP
W_RIGHT_1 = _vsp_g.W_RIGHT_1
W_FREE = _vsp_g.W_FREE
BLEND_FREE = _vsp_g.BLEND_FREE
BLEND_ANGLES = _vsp_g.BLEND_ANGLES
BLEND_MATCH_IN_LE_TRAP = _vsp_g.BLEND_MATCH_IN_LE_TRAP
BLEND_MATCH_IN_TE_TRAP = _vsp_g.BLEND_MATCH_IN_TE_TRAP
BLEND_MATCH_OUT_LE_TRAP = _vsp_g.BLEND_MATCH_OUT_LE_TRAP
BLEND_MATCH_OUT_TE_TRAP = _vsp_g.BLEND_MATCH_OUT_TE_TRAP
BLEND_MATCH_IN_ANGLES = _vsp_g.BLEND_MATCH_IN_ANGLES
BLEND_MATCH_LE_ANGLES = _vsp_g.BLEND_MATCH_LE_ANGLES
BLEND_NUM_TYPES = _vsp_g.BLEND_NUM_TYPES
AR_WSECT_DRIVER = _vsp_g.AR_WSECT_DRIVER
SPAN_WSECT_DRIVER = _vsp_g.SPAN_WSECT_DRIVER
AREA_WSECT_DRIVER = _vsp_g.AREA_WSECT_DRIVER
TAPER_WSECT_DRIVER = _vsp_g.TAPER_WSECT_DRIVER
AVEC_WSECT_DRIVER = _vsp_g.AVEC_WSECT_DRIVER
ROOTC_WSECT_DRIVER = _vsp_g.ROOTC_WSECT_DRIVER
TIPC_WSECT_DRIVER = _vsp_g.TIPC_WSECT_DRIVER
SECSWEEP_WSECT_DRIVER = _vsp_g.SECSWEEP_WSECT_DRIVER
NUM_WSECT_DRIVER = _vsp_g.NUM_WSECT_DRIVER
SWEEP_WSECT_DRIVER = _vsp_g.SWEEP_WSECT_DRIVER
SWEEPLOC_WSECT_DRIVER = _vsp_g.SWEEPLOC_WSECT_DRIVER
SECSWEEPLOC_WSECT_DRIVER = _vsp_g.SECSWEEPLOC_WSECT_DRIVER
XDDM_VAR = _vsp_g.XDDM_VAR
XDDM_CONST = _vsp_g.XDDM_CONST
CLOSE_NONE = _vsp_g.CLOSE_NONE
CLOSE_SKEWLOW = _vsp_g.CLOSE_SKEWLOW
CLOSE_SKEWUP = _vsp_g.CLOSE_SKEWUP
CLOSE_SKEWBOTH = _vsp_g.CLOSE_SKEWBOTH
CLOSE_EXTRAP = _vsp_g.CLOSE_EXTRAP
CLOSE_NUM_TYPES = _vsp_g.CLOSE_NUM_TYPES
XS_UNDEFINED = _vsp_g.XS_UNDEFINED
XS_POINT = _vsp_g.XS_POINT
XS_CIRCLE = _vsp_g.XS_CIRCLE
XS_ELLIPSE = _vsp_g.XS_ELLIPSE
XS_SUPER_ELLIPSE = _vsp_g.XS_SUPER_ELLIPSE
XS_ROUNDED_RECTANGLE = _vsp_g.XS_ROUNDED_RECTANGLE
XS_GENERAL_FUSE = _vsp_g.XS_GENERAL_FUSE
XS_FILE_FUSE = _vsp_g.XS_FILE_FUSE
XS_FOUR_SERIES = _vsp_g.XS_FOUR_SERIES
XS_SIX_SERIES = _vsp_g.XS_SIX_SERIES
XS_BICONVEX = _vsp_g.XS_BICONVEX
XS_WEDGE = _vsp_g.XS_WEDGE
XS_EDIT_CURVE = _vsp_g.XS_EDIT_CURVE
XS_FILE_AIRFOIL = _vsp_g.XS_FILE_AIRFOIL
XS_CST_AIRFOIL = _vsp_g.XS_CST_AIRFOIL
XS_VKT_AIRFOIL = _vsp_g.XS_VKT_AIRFOIL
XS_FOUR_DIGIT_MOD = _vsp_g.XS_FOUR_DIGIT_MOD
XS_FIVE_DIGIT = _vsp_g.XS_FIVE_DIGIT
XS_FIVE_DIGIT_MOD = _vsp_g.XS_FIVE_DIGIT_MOD
XS_ONE_SIX_SERIES = _vsp_g.XS_ONE_SIX_SERIES
XS_NUM_TYPES = _vsp_g.XS_NUM_TYPES
WIDTH_XSEC_DRIVER = _vsp_g.WIDTH_XSEC_DRIVER
AREA_XSEC_DRIVER = _vsp_g.AREA_XSEC_DRIVER
HEIGHT_XSEC_DRIVER = _vsp_g.HEIGHT_XSEC_DRIVER
HWRATIO_XSEC_DRIVER = _vsp_g.HWRATIO_XSEC_DRIVER
NUM_XSEC_DRIVER = _vsp_g.NUM_XSEC_DRIVER
CIRCLE_NUM_XSEC_DRIVER = _vsp_g.CIRCLE_NUM_XSEC_DRIVER
XSEC_BOTH_SIDES = _vsp_g.XSEC_BOTH_SIDES
XSEC_LEFT_SIDE = _vsp_g.XSEC_LEFT_SIDE
XSEC_RIGHT_SIDE = _vsp_g.XSEC_RIGHT_SIDE
TRIM_NONE = _vsp_g.TRIM_NONE
TRIM_X = _vsp_g.TRIM_X
TRIM_THICK = _vsp_g.TRIM_THICK
TRIM_NUM_TYPES = _vsp_g.TRIM_NUM_TYPES
XSEC_FUSE = _vsp_g.XSEC_FUSE
XSEC_STACK = _vsp_g.XSEC_STACK
XSEC_WING = _vsp_g.XSEC_WING
XSEC_CUSTOM = _vsp_g.XSEC_CUSTOM
XSEC_PROP = _vsp_g.XSEC_PROP
XSEC_NUM_TYPES = _vsp_g.XSEC_NUM_TYPES
XS_SHIFT_LE = _vsp_g.XS_SHIFT_LE
XS_SHIFT_MID = _vsp_g.XS_SHIFT_MID
XS_SHIFT_TE = _vsp_g.XS_SHIFT_TE
del _vsp_g

@test_wrap
def ErrorMgrSingleton_getInstance():
    return _vsp_g.ErrorMgrSingleton_getInstance()


@test_wrap
def VSPCheckSetup():
    return _vsp_g.VSPCheckSetup()

@test_wrap
def VSPRenew():
    return _vsp_g.VSPRenew()

@test_wrap
def Update(update_managers=True):
    return _vsp_g.Update(update_managers)

@test_wrap
def VSPExit(error_code):
    return _vsp_g.VSPExit(error_code)

@test_wrap
def GetAndResetUpdateCount():
    return _vsp_g.GetAndResetUpdateCount()

@test_wrap
def GetVSPVersion():
    return _vsp_g.GetVSPVersion()

@test_wrap
def GetVSPExePath():
    return _vsp_g.GetVSPExePath()

@test_wrap
def SetVSPAEROPath(path):
    return _vsp_g.SetVSPAEROPath(path)

@test_wrap
def GetVSPAEROPath():
    return _vsp_g.GetVSPAEROPath()

@test_wrap
def CheckForVSPAERO(path):
    return _vsp_g.CheckForVSPAERO(path)

@test_wrap
def RegisterCFDMeshAnalyses():
    return _vsp_g.RegisterCFDMeshAnalyses()

@test_wrap
def ReadVSPFile(file_name):
    return _vsp_g.ReadVSPFile(file_name)

@test_wrap
def WriteVSPFile(*args):
    return _vsp_g.WriteVSPFile(*args)

@test_wrap
def SetVSP3FileName(file_name):
    return _vsp_g.SetVSP3FileName(file_name)

@test_wrap
def GetVSPFileName():
    return _vsp_g.GetVSPFileName()

@test_wrap
def ClearVSPModel():
    return _vsp_g.ClearVSPModel()

@test_wrap
def InsertVSPFile(file_name, parent_geom_id):
    return _vsp_g.InsertVSPFile(file_name, parent_geom_id)

@test_wrap
def ExportFile(*args):
    return _vsp_g.ExportFile(*args)

@test_wrap
def ImportFile(file_name, file_type, parent):
    return _vsp_g.ImportFile(file_name, file_type, parent)

@test_wrap
def SetBEMPropID(prop_id):
    return _vsp_g.SetBEMPropID(prop_id)

@test_wrap
def ReadApplyDESFile(file_name):
    return _vsp_g.ReadApplyDESFile(file_name)

@test_wrap
def WriteDESFile(file_name):
    return _vsp_g.WriteDESFile(file_name)

@test_wrap
def ReadApplyXDDMFile(file_name):
    return _vsp_g.ReadApplyXDDMFile(file_name)

@test_wrap
def WriteXDDMFile(file_name):
    return _vsp_g.WriteXDDMFile(file_name)

@test_wrap
def GetNumDesignVars():
    return _vsp_g.GetNumDesignVars()

@test_wrap
def AddDesignVar(parm_id, type):
    return _vsp_g.AddDesignVar(parm_id, type)

@test_wrap
def DeleteAllDesignVars():
    return _vsp_g.DeleteAllDesignVars()

@test_wrap
def GetDesignVar(index):
    return _vsp_g.GetDesignVar(index)

@test_wrap
def GetDesignVarType(index):
    return _vsp_g.GetDesignVarType(index)

@test_wrap
def SetComputationFileName(file_type, file_name):
    return _vsp_g.SetComputationFileName(file_type, file_name)

@test_wrap
def ComputeMassProps(set, num_slices):
    return _vsp_g.ComputeMassProps(set, num_slices)

@test_wrap
def ComputeCompGeom(set, half_mesh, file_export_types):
    return _vsp_g.ComputeCompGeom(set, half_mesh, file_export_types)

@test_wrap
def ComputePlaneSlice(set, num_slices, norm, auto_bnd, start_bnd=0, end_bnd=0):
    return _vsp_g.ComputePlaneSlice(set, num_slices, norm, auto_bnd, start_bnd, end_bnd)

@test_wrap
def ComputeDegenGeom(set, file_export_types):
    return _vsp_g.ComputeDegenGeom(set, file_export_types)

@test_wrap
def ComputeCFDMesh(set, file_export_types):
    return _vsp_g.ComputeCFDMesh(set, file_export_types)

@test_wrap
def SetCFDMeshVal(type, val):
    return _vsp_g.SetCFDMeshVal(type, val)

@test_wrap
def SetCFDWakeFlag(geom_id, flag):
    return _vsp_g.SetCFDWakeFlag(geom_id, flag)

@test_wrap
def DeleteAllCFDSources():
    return _vsp_g.DeleteAllCFDSources()

@test_wrap
def AddDefaultSources():
    return _vsp_g.AddDefaultSources()

@test_wrap
def AddCFDSource(type, geom_id, surf_index, l1, r1, u1, w1, l2=0, r2=0, u2=0, w2=0):
    return _vsp_g.AddCFDSource(type, geom_id, surf_index, l1, r1, u1, w1, l2, r2, u2, w2)

@test_wrap
def GetVSPAERORefWingID():
    return _vsp_g.GetVSPAERORefWingID()

@test_wrap
def SetVSPAERORefWingID(geom_id):
    return _vsp_g.SetVSPAERORefWingID(geom_id)

@test_wrap
def GetNumAnalysis():
    return _vsp_g.GetNumAnalysis()

@test_wrap
def ListAnalysis():
    return _vsp_g.ListAnalysis()

@test_wrap
def GetAnalysisInputNames(analysis):
    return _vsp_g.GetAnalysisInputNames(analysis)

@test_wrap
def GetAnalysisDoc(analysis):
    return _vsp_g.GetAnalysisDoc(analysis)

@test_wrap
def GetAnalysisInputDoc(analysis, name):
    return _vsp_g.GetAnalysisInputDoc(analysis, name)

@test_wrap
def ExecAnalysis(analysis):
    return _vsp_g.ExecAnalysis(analysis)

@test_wrap
def GetNumAnalysisInputData(analysis, name):
    return _vsp_g.GetNumAnalysisInputData(analysis, name)

@test_wrap
def GetAnalysisInputType(analysis, name):
    return _vsp_g.GetAnalysisInputType(analysis, name)

@test_wrap
def GetIntAnalysisInput(analysis, name, index=0):
    return _vsp_g.GetIntAnalysisInput(analysis, name, index)

@test_wrap
def GetDoubleAnalysisInput(analysis, name, index=0):
    return _vsp_g.GetDoubleAnalysisInput(analysis, name, index)

@test_wrap
def GetStringAnalysisInput(analysis, name, index=0):
    return _vsp_g.GetStringAnalysisInput(analysis, name, index)

@test_wrap
def GetVec3dAnalysisInput(analysis, name, index=0):
    return _vsp_g.GetVec3dAnalysisInput(analysis, name, index)

@test_wrap
def SetAnalysisInputDefaults(analysis):
    return _vsp_g.SetAnalysisInputDefaults(analysis)

@test_wrap
def SetIntAnalysisInput(analysis, name, indata, index=0):
    return _vsp_g.SetIntAnalysisInput(analysis, name, indata, index)

@test_wrap
def SetDoubleAnalysisInput(analysis, name, indata, index=0):
    return _vsp_g.SetDoubleAnalysisInput(analysis, name, indata, index)

@test_wrap
def SetStringAnalysisInput(analysis, name, indata, index=0):
    return _vsp_g.SetStringAnalysisInput(analysis, name, indata, index)

@test_wrap
def SetVec3dAnalysisInput(analysis, name, indata, index=0):
    return _vsp_g.SetVec3dAnalysisInput(analysis, name, indata, index)

@test_wrap
def PrintAnalysisInputs(analysis_name):
    return _vsp_g.PrintAnalysisInputs(analysis_name)

@test_wrap
def PrintAnalysisDocs(analysis_name):
    return _vsp_g.PrintAnalysisDocs(analysis_name)

@test_wrap
def GetAllResultsNames():
    return _vsp_g.GetAllResultsNames()

@test_wrap
def GetAllDataNames(results_id):
    return _vsp_g.GetAllDataNames(results_id)

@test_wrap
def GetNumResults(name):
    return _vsp_g.GetNumResults(name)

@test_wrap
def GetResultsName(results_id):
    return _vsp_g.GetResultsName(results_id)

@test_wrap
def GetResultsSetDoc(results_id):
    return _vsp_g.GetResultsSetDoc(results_id)

@test_wrap
def GetResultsEntryDoc(results_id, data_name):
    return _vsp_g.GetResultsEntryDoc(results_id, data_name)

@test_wrap
def FindResultsID(name, index=0):
    return _vsp_g.FindResultsID(name, index)

@test_wrap
def FindLatestResultsID(name):
    return _vsp_g.FindLatestResultsID(name)

@test_wrap
def GetNumData(results_id, data_name):
    return _vsp_g.GetNumData(results_id, data_name)

@test_wrap
def GetResultsType(results_id, data_name):
    return _vsp_g.GetResultsType(results_id, data_name)

@test_wrap
def GetIntResults(id, name, index=0):
    return _vsp_g.GetIntResults(id, name, index)

@test_wrap
def GetDoubleResults(id, name, index=0):
    return _vsp_g.GetDoubleResults(id, name, index)

@test_wrap
def GetDoubleMatResults(id, name, index=0):
    return _vsp_g.GetDoubleMatResults(id, name, index)

@test_wrap
def GetStringResults(id, name, index=0):
    return _vsp_g.GetStringResults(id, name, index)

@test_wrap
def GetVec3dResults(id, name, index=0):
    return _vsp_g.GetVec3dResults(id, name, index)

@test_wrap
def CreateGeomResults(geom_id, name):
    return _vsp_g.CreateGeomResults(geom_id, name)

@test_wrap
def DeleteAllResults():
    return _vsp_g.DeleteAllResults()

@test_wrap
def DeleteResult(id):
    return _vsp_g.DeleteResult(id)

@test_wrap
def WriteResultsCSVFile(id, file_name):
    return _vsp_g.WriteResultsCSVFile(id, file_name)

@test_wrap
def PrintResults(results_id):
    return _vsp_g.PrintResults(results_id)

@test_wrap
def PrintResultsDocs(results_id):
    return _vsp_g.PrintResultsDocs(results_id)

@test_wrap
def InitGui():
    return _vsp_g.InitGui()

@test_wrap
def StartGui():
    return _vsp_g.StartGui()

@test_wrap
def InitStartGui():
    return _vsp_g.InitStartGui()

@test_wrap
def UpdateGui():
    return _vsp_g.UpdateGui()

@test_wrap
def ScreenGrab(fname, w, h, transparentBG, autocrop=False):
    return _vsp_g.ScreenGrab(fname, w, h, transparentBG, autocrop)

@test_wrap
def SetViewAxis(vaxis):
    return _vsp_g.SetViewAxis(vaxis)

@test_wrap
def SetShowBorders(brdr):
    return _vsp_g.SetShowBorders(brdr)

@test_wrap
def SetGeomDrawType(geom_id, type):
    return _vsp_g.SetGeomDrawType(geom_id, type)

@test_wrap
def SetGeomDisplayType(geom_id, type):
    return _vsp_g.SetGeomDisplayType(geom_id, type)

@test_wrap
def SetBackground(r, g, b):
    return _vsp_g.SetBackground(r, g, b)

@test_wrap
def GetGeomTypes():
    return _vsp_g.GetGeomTypes()

@test_wrap
def AddGeom(*args):
    return _vsp_g.AddGeom(*args)

@test_wrap
def UpdateGeom(geom_id):
    return _vsp_g.UpdateGeom(geom_id)

@test_wrap
def DeleteGeom(geom_id):
    return _vsp_g.DeleteGeom(geom_id)

@test_wrap
def DeleteGeomVec(del_vec):
    return _vsp_g.DeleteGeomVec(del_vec)

@test_wrap
def CutGeomToClipboard(geom_id):
    return _vsp_g.CutGeomToClipboard(geom_id)

@test_wrap
def CopyGeomToClipboard(geom_id):
    return _vsp_g.CopyGeomToClipboard(geom_id)

@test_wrap
def PasteGeomClipboard(*args):
    return _vsp_g.PasteGeomClipboard(*args)

@test_wrap
def FindGeoms():
    return _vsp_g.FindGeoms()

@test_wrap
def FindGeomsWithName(name):
    return _vsp_g.FindGeomsWithName(name)

@test_wrap
def FindGeom(name, index):
    return _vsp_g.FindGeom(name, index)

@test_wrap
def SetGeomName(geom_id, name):
    return _vsp_g.SetGeomName(geom_id, name)

@test_wrap
def GetGeomName(geom_id):
    return _vsp_g.GetGeomName(geom_id)

@test_wrap
def GetGeomParmIDs(geom_id):
    return _vsp_g.GetGeomParmIDs(geom_id)

@test_wrap
def GetGeomTypeName(geom_id):
    return _vsp_g.GetGeomTypeName(geom_id)

@test_wrap
def GetParm(geom_id, name, group):
    return _vsp_g.GetParm(geom_id, name, group)

@test_wrap
def GetGeomParent(geom_id):
    return _vsp_g.GetGeomParent(geom_id)

@test_wrap
def GetGeomChildren(geom_id):
    return _vsp_g.GetGeomChildren(geom_id)

@test_wrap
def GetNumXSecSurfs(geom_id):
    return _vsp_g.GetNumXSecSurfs(geom_id)

@test_wrap
def GetNumMainSurfs(geom_id):
    return _vsp_g.GetNumMainSurfs(geom_id)

@test_wrap
def GetTotalNumSurfs(geom_id):
    return _vsp_g.GetTotalNumSurfs(geom_id)

@test_wrap
def GetGeomVSPSurfType(geom_id, main_surf_ind=0):
    return _vsp_g.GetGeomVSPSurfType(geom_id, main_surf_ind)

@test_wrap
def GetGeomVSPSurfCfdType(geom_id, main_surf_ind=0):
    return _vsp_g.GetGeomVSPSurfCfdType(geom_id, main_surf_ind)

@test_wrap
def GetGeomBBoxMax(geom_id, main_surf_ind=0, ref_frame_is_absolute=True):
    return _vsp_g.GetGeomBBoxMax(geom_id, main_surf_ind, ref_frame_is_absolute)

@test_wrap
def GetGeomBBoxMin(geom_id, main_surf_ind=0, ref_frame_is_absolute=True):
    return _vsp_g.GetGeomBBoxMin(geom_id, main_surf_ind, ref_frame_is_absolute)

@test_wrap
def AddSubSurf(geom_id, type, surfindex=0):
    return _vsp_g.AddSubSurf(geom_id, type, surfindex)

@test_wrap
def GetSubSurf(*args):
    return _vsp_g.GetSubSurf(*args)

@test_wrap
def DeleteSubSurf(*args):
    return _vsp_g.DeleteSubSurf(*args)

@test_wrap
def SetSubSurfName(*args):
    return _vsp_g.SetSubSurfName(*args)

@test_wrap
def GetSubSurfName(*args):
    return _vsp_g.GetSubSurfName(*args)

@test_wrap
def GetSubSurfIndex(sub_id):
    return _vsp_g.GetSubSurfIndex(sub_id)

@test_wrap
def GetSubSurfIDVec(geom_id):
    return _vsp_g.GetSubSurfIDVec(geom_id)

@test_wrap
def GetAllSubSurfIDs():
    return _vsp_g.GetAllSubSurfIDs()

@test_wrap
def GetNumSubSurf(geom_id):
    return _vsp_g.GetNumSubSurf(geom_id)

@test_wrap
def GetSubSurfType(sub_id):
    return _vsp_g.GetSubSurfType(sub_id)

@test_wrap
def GetSubSurfParmIDs(sub_id):
    return _vsp_g.GetSubSurfParmIDs(sub_id)

@test_wrap
def AddFeaStruct(geom_id, init_skin=True, surfindex=0):
    return _vsp_g.AddFeaStruct(geom_id, init_skin, surfindex)

@test_wrap
def SetFeaMeshStructIndex(struct_index):
    return _vsp_g.SetFeaMeshStructIndex(struct_index)

@test_wrap
def DeleteFeaStruct(geom_id, fea_struct_ind):
    return _vsp_g.DeleteFeaStruct(geom_id, fea_struct_ind)

@test_wrap
def GetFeaStructID(geom_id, fea_struct_ind):
    return _vsp_g.GetFeaStructID(geom_id, fea_struct_ind)

@test_wrap
def GetFeaStructIndex(struct_id):
    return _vsp_g.GetFeaStructIndex(struct_id)

@test_wrap
def GetFeaStructParentGeomID(struct_id):
    return _vsp_g.GetFeaStructParentGeomID(struct_id)

@test_wrap
def GetFeaStructName(geom_id, fea_struct_ind):
    return _vsp_g.GetFeaStructName(geom_id, fea_struct_ind)

@test_wrap
def SetFeaStructName(geom_id, fea_struct_ind, name):
    return _vsp_g.SetFeaStructName(geom_id, fea_struct_ind, name)

@test_wrap
def GetFeaStructIDVec():
    return _vsp_g.GetFeaStructIDVec()

@test_wrap
def SetFeaPartName(part_id, name):
    return _vsp_g.SetFeaPartName(part_id, name)

@test_wrap
def AddFeaPart(geom_id, fea_struct_ind, type):
    return _vsp_g.AddFeaPart(geom_id, fea_struct_ind, type)

@test_wrap
def DeleteFeaPart(geom_id, fea_struct_ind, part_id):
    return _vsp_g.DeleteFeaPart(geom_id, fea_struct_ind, part_id)

@test_wrap
def GetFeaPartID(fea_struct_id, fea_part_index):
    return _vsp_g.GetFeaPartID(fea_struct_id, fea_part_index)

@test_wrap
def GetFeaPartName(part_id):
    return _vsp_g.GetFeaPartName(part_id)

@test_wrap
def GetFeaPartType(part_id):
    return _vsp_g.GetFeaPartType(part_id)

@test_wrap
def GetFeaPartIDVec(fea_struct_id):
    return _vsp_g.GetFeaPartIDVec(fea_struct_id)

@test_wrap
def GetFeaSubSurfIDVec(fea_struct_id):
    return _vsp_g.GetFeaSubSurfIDVec(fea_struct_id)

@test_wrap
def SetFeaPartPerpendicularSparID(part_id, perpendicular_spar_id):
    return _vsp_g.SetFeaPartPerpendicularSparID(part_id, perpendicular_spar_id)

@test_wrap
def GetFeaPartPerpendicularSparID(part_id):
    return _vsp_g.GetFeaPartPerpendicularSparID(part_id)

@test_wrap
def AddFeaSubSurf(geom_id, fea_struct_ind, type):
    return _vsp_g.AddFeaSubSurf(geom_id, fea_struct_ind, type)

@test_wrap
def DeleteFeaSubSurf(geom_id, fea_struct_ind, ss_id):
    return _vsp_g.DeleteFeaSubSurf(geom_id, fea_struct_ind, ss_id)

@test_wrap
def GetFeaSubSurfIndex(ss_id):
    return _vsp_g.GetFeaSubSurfIndex(ss_id)

@test_wrap
def NumFeaStructures():
    return _vsp_g.NumFeaStructures()

@test_wrap
def NumFeaParts(fea_struct_id):
    return _vsp_g.NumFeaParts(fea_struct_id)

@test_wrap
def NumFeaSubSurfs(fea_struct_id):
    return _vsp_g.NumFeaSubSurfs(fea_struct_id)

@test_wrap
def AddFeaMaterial():
    return _vsp_g.AddFeaMaterial()

@test_wrap
def AddFeaProperty(property_type=0):
    return _vsp_g.AddFeaProperty(property_type)

@test_wrap
def SetFeaMeshVal(geom_id, fea_struct_ind, type, val):
    return _vsp_g.SetFeaMeshVal(geom_id, fea_struct_ind, type, val)

@test_wrap
def SetFeaMeshFileName(geom_id, fea_struct_ind, file_type, file_name):
    return _vsp_g.SetFeaMeshFileName(geom_id, fea_struct_ind, file_type, file_name)

@test_wrap
def ComputeFeaMesh(*args):
    return _vsp_g.ComputeFeaMesh(*args)

@test_wrap
def CutXSec(geom_id, index):
    return _vsp_g.CutXSec(geom_id, index)

@test_wrap
def CopyXSec(geom_id, index):
    return _vsp_g.CopyXSec(geom_id, index)

@test_wrap
def PasteXSec(geom_id, index):
    return _vsp_g.PasteXSec(geom_id, index)

@test_wrap
def InsertXSec(geom_id, index, type):
    return _vsp_g.InsertXSec(geom_id, index, type)

@test_wrap
def SetDriverGroup(geom_id, section_index, driver_0, driver_1=-1, driver_2=-1):
    return _vsp_g.SetDriverGroup(geom_id, section_index, driver_0, driver_1, driver_2)

@test_wrap
def GetXSecSurf(geom_id, index):
    return _vsp_g.GetXSecSurf(geom_id, index)

@test_wrap
def GetNumXSec(xsec_surf_id):
    return _vsp_g.GetNumXSec(xsec_surf_id)

@test_wrap
def GetXSec(xsec_surf_id, xsec_index):
    return _vsp_g.GetXSec(xsec_surf_id, xsec_index)

@test_wrap
def ChangeXSecShape(xsec_surf_id, xsec_index, type):
    return _vsp_g.ChangeXSecShape(xsec_surf_id, xsec_index, type)

@test_wrap
def SetXSecSurfGlobalXForm(xsec_surf_id, mat):
    return _vsp_g.SetXSecSurfGlobalXForm(xsec_surf_id, mat)

@test_wrap
def GetXSecSurfGlobalXForm(xsec_surf_id):
    return _vsp_g.GetXSecSurfGlobalXForm(xsec_surf_id)

@test_wrap
def GetXSecShape(xsec_id):
    return _vsp_g.GetXSecShape(xsec_id)

@test_wrap
def GetXSecWidth(xsec_id):
    return _vsp_g.GetXSecWidth(xsec_id)

@test_wrap
def GetXSecHeight(xsec_id):
    return _vsp_g.GetXSecHeight(xsec_id)

@test_wrap
def SetXSecWidthHeight(xsec_id, w, h):
    return _vsp_g.SetXSecWidthHeight(xsec_id, w, h)

@test_wrap
def SetXSecWidth(xsec_id, w):
    return _vsp_g.SetXSecWidth(xsec_id, w)

@test_wrap
def SetXSecHeight(xsec_id, h):
    return _vsp_g.SetXSecHeight(xsec_id, h)

@test_wrap
def GetXSecParmIDs(xsec_id):
    return _vsp_g.GetXSecParmIDs(xsec_id)

@test_wrap
def GetXSecParm(xsec_id, name):
    return _vsp_g.GetXSecParm(xsec_id, name)

@test_wrap
def ReadFileXSec(xsec_id, file_name):
    return _vsp_g.ReadFileXSec(xsec_id, file_name)

@test_wrap
def SetXSecPnts(xsec_id, pnt_vec):
    return _vsp_g.SetXSecPnts(xsec_id, pnt_vec)

@test_wrap
def ComputeXSecPnt(xsec_id, fract):
    return _vsp_g.ComputeXSecPnt(xsec_id, fract)

@test_wrap
def ComputeXSecTan(xsec_id, fract):
    return _vsp_g.ComputeXSecTan(xsec_id, fract)

@test_wrap
def ResetXSecSkinParms(xsec_id):
    return _vsp_g.ResetXSecSkinParms(xsec_id)

@test_wrap
def SetXSecContinuity(xsec_id, cx):
    return _vsp_g.SetXSecContinuity(xsec_id, cx)

@test_wrap
def SetXSecTanAngles(xsec_id, side, top, right, bottom, left):
    return _vsp_g.SetXSecTanAngles(xsec_id, side, top, right, bottom, left)

@test_wrap
def SetXSecTanSlews(xsec_id, side, top, right, bottom, left):
    return _vsp_g.SetXSecTanSlews(xsec_id, side, top, right, bottom, left)

@test_wrap
def SetXSecTanStrengths(xsec_id, side, top, right, bottom, left):
    return _vsp_g.SetXSecTanStrengths(xsec_id, side, top, right, bottom, left)

@test_wrap
def SetXSecCurvatures(xsec_id, side, top, right, bottom, left):
    return _vsp_g.SetXSecCurvatures(xsec_id, side, top, right, bottom, left)

@test_wrap
def ReadFileAirfoil(xsec_id, file_name):
    return _vsp_g.ReadFileAirfoil(xsec_id, file_name)

@test_wrap
def SetAirfoilUpperPnts(xsec_id, up_pnt_vec):
    return _vsp_g.SetAirfoilUpperPnts(xsec_id, up_pnt_vec)

@test_wrap
def SetAirfoilLowerPnts(xsec_id, low_pnt_vec):
    return _vsp_g.SetAirfoilLowerPnts(xsec_id, low_pnt_vec)

@test_wrap
def SetAirfoilPnts(xsec_id, up_pnt_vec, low_pnt_vec):
    return _vsp_g.SetAirfoilPnts(xsec_id, up_pnt_vec, low_pnt_vec)

@test_wrap
def GetHersheyBarLiftDist(npts, alpha, Vinf, span, full_span_flag=False):
    return _vsp_g.GetHersheyBarLiftDist(npts, alpha, Vinf, span, full_span_flag)

@test_wrap
def GetHersheyBarDragDist(npts, alpha, Vinf, span, full_span_flag=False):
    return _vsp_g.GetHersheyBarDragDist(npts, alpha, Vinf, span, full_span_flag)

@test_wrap
def GetVKTAirfoilPnts(npts, alpha, epsilon, kappa, tau):
    return _vsp_g.GetVKTAirfoilPnts(npts, alpha, epsilon, kappa, tau)

@test_wrap
def GetVKTAirfoilCpDist(alpha, epsilon, kappa, tau, xyz_data):
    return _vsp_g.GetVKTAirfoilCpDist(alpha, epsilon, kappa, tau, xyz_data)

@test_wrap
def GetEllipsoidSurfPnts(center, abc_rad, u_npts=20, w_npts=20):
    return _vsp_g.GetEllipsoidSurfPnts(center, abc_rad, u_npts, w_npts)

@test_wrap
def GetFeatureLinePnts(geom_id):
    return _vsp_g.GetFeatureLinePnts(geom_id)

@test_wrap
def GetEllipsoidCpDist(surf_pnt_vec, abc_rad, V_inf):
    return _vsp_g.GetEllipsoidCpDist(surf_pnt_vec, abc_rad, V_inf)

@test_wrap
def IntegrateEllipsoidFlow(abc_rad, abc_index):
    return _vsp_g.IntegrateEllipsoidFlow(abc_rad, abc_index)

@test_wrap
def GetAirfoilUpperPnts(xsec_id):
    return _vsp_g.GetAirfoilUpperPnts(xsec_id)

@test_wrap
def GetAirfoilLowerPnts(xsec_id):
    return _vsp_g.GetAirfoilLowerPnts(xsec_id)

@test_wrap
def GetUpperCSTCoefs(xsec_id):
    return _vsp_g.GetUpperCSTCoefs(xsec_id)

@test_wrap
def GetLowerCSTCoefs(xsec_id):
    return _vsp_g.GetLowerCSTCoefs(xsec_id)

@test_wrap
def GetUpperCSTDegree(xsec_id):
    return _vsp_g.GetUpperCSTDegree(xsec_id)

@test_wrap
def GetLowerCSTDegree(xsec_id):
    return _vsp_g.GetLowerCSTDegree(xsec_id)

@test_wrap
def SetUpperCST(xsec_id, deg, coefs):
    return _vsp_g.SetUpperCST(xsec_id, deg, coefs)

@test_wrap
def SetLowerCST(xsec_id, deg, coefs):
    return _vsp_g.SetLowerCST(xsec_id, deg, coefs)

@test_wrap
def PromoteCSTUpper(xsec_id):
    return _vsp_g.PromoteCSTUpper(xsec_id)

@test_wrap
def PromoteCSTLower(xsec_id):
    return _vsp_g.PromoteCSTLower(xsec_id)

@test_wrap
def DemoteCSTUpper(xsec_id):
    return _vsp_g.DemoteCSTUpper(xsec_id)

@test_wrap
def DemoteCSTLower(xsec_id):
    return _vsp_g.DemoteCSTLower(xsec_id)

@test_wrap
def FitAfCST(xsec_surf_id, xsec_index, deg):
    return _vsp_g.FitAfCST(xsec_surf_id, xsec_index, deg)

@test_wrap
def ChangeBORXSecShape(bor_id, type):
    return _vsp_g.ChangeBORXSecShape(bor_id, type)

@test_wrap
def GetBORXSecShape(bor_id):
    return _vsp_g.GetBORXSecShape(bor_id)

@test_wrap
def ReadBORFileXSec(bor_id, file_name):
    return _vsp_g.ReadBORFileXSec(bor_id, file_name)

@test_wrap
def SetBORXSecPnts(bor_id, pnt_vec):
    return _vsp_g.SetBORXSecPnts(bor_id, pnt_vec)

@test_wrap
def ComputeBORXSecPnt(bor_id, fract):
    return _vsp_g.ComputeBORXSecPnt(bor_id, fract)

@test_wrap
def ComputeBORXSecTan(bor_id, fract):
    return _vsp_g.ComputeBORXSecTan(bor_id, fract)

@test_wrap
def ReadBORFileAirfoil(bor_id, file_name):
    return _vsp_g.ReadBORFileAirfoil(bor_id, file_name)

@test_wrap
def SetBORAirfoilUpperPnts(bor_id, up_pnt_vec):
    return _vsp_g.SetBORAirfoilUpperPnts(bor_id, up_pnt_vec)

@test_wrap
def SetBORAirfoilLowerPnts(bor_id, low_pnt_vec):
    return _vsp_g.SetBORAirfoilLowerPnts(bor_id, low_pnt_vec)

@test_wrap
def SetBORAirfoilPnts(bor_id, up_pnt_vec, low_pnt_vec):
    return _vsp_g.SetBORAirfoilPnts(bor_id, up_pnt_vec, low_pnt_vec)

@test_wrap
def GetBORAirfoilUpperPnts(bor_id):
    return _vsp_g.GetBORAirfoilUpperPnts(bor_id)

@test_wrap
def GetBORAirfoilLowerPnts(bor_id):
    return _vsp_g.GetBORAirfoilLowerPnts(bor_id)

@test_wrap
def GetBORUpperCSTCoefs(bor_id):
    return _vsp_g.GetBORUpperCSTCoefs(bor_id)

@test_wrap
def GetBORLowerCSTCoefs(bor_id):
    return _vsp_g.GetBORLowerCSTCoefs(bor_id)

@test_wrap
def GetBORUpperCSTDegree(bor_id):
    return _vsp_g.GetBORUpperCSTDegree(bor_id)

@test_wrap
def GetBORLowerCSTDegree(bor_id):
    return _vsp_g.GetBORLowerCSTDegree(bor_id)

@test_wrap
def SetBORUpperCST(bor_id, deg, coefs):
    return _vsp_g.SetBORUpperCST(bor_id, deg, coefs)

@test_wrap
def SetBORLowerCST(bor_id, deg, coefs):
    return _vsp_g.SetBORLowerCST(bor_id, deg, coefs)

@test_wrap
def PromoteBORCSTUpper(bor_id):
    return _vsp_g.PromoteBORCSTUpper(bor_id)

@test_wrap
def PromoteBORCSTLower(bor_id):
    return _vsp_g.PromoteBORCSTLower(bor_id)

@test_wrap
def DemoteBORCSTUpper(bor_id):
    return _vsp_g.DemoteBORCSTUpper(bor_id)

@test_wrap
def DemoteBORCSTLower(bor_id):
    return _vsp_g.DemoteBORCSTLower(bor_id)

@test_wrap
def FitBORAfCST(bor_id, deg):
    return _vsp_g.FitBORAfCST(bor_id, deg)

@test_wrap
def WriteBezierAirfoil(file_name, geom_id, foilsurf_u):
    return _vsp_g.WriteBezierAirfoil(file_name, geom_id, foilsurf_u)

@test_wrap
def WriteSeligAirfoil(file_name, geom_id, foilsurf_u):
    return _vsp_g.WriteSeligAirfoil(file_name, geom_id, foilsurf_u)

@test_wrap
def GetAirfoilCoordinates(geom_id, foilsurf_u):
    return _vsp_g.GetAirfoilCoordinates(geom_id, foilsurf_u)

@test_wrap
def EditXSecInitShape(xsec_id):
    return _vsp_g.EditXSecInitShape(xsec_id)

@test_wrap
def EditXSecConvertTo(xsec_id, newtype):
    return _vsp_g.EditXSecConvertTo(xsec_id, newtype)

@test_wrap
def GetEditXSecUVec(xsec_id):
    return _vsp_g.GetEditXSecUVec(xsec_id)

@test_wrap
def GetEditXSecCtrlVec(xsec_id, non_dimensional=True):
    return _vsp_g.GetEditXSecCtrlVec(xsec_id, non_dimensional)

@test_wrap
def SetEditXSecPnts(xsec_id, u_vec, control_pts, r_vec):
    return _vsp_g.SetEditXSecPnts(xsec_id, u_vec, control_pts, r_vec)

@test_wrap
def EditXSecDelPnt(xsec_id, indx):
    return _vsp_g.EditXSecDelPnt(xsec_id, indx)

@test_wrap
def EditXSecSplit01(xsec_id, u):
    return _vsp_g.EditXSecSplit01(xsec_id, u)

@test_wrap
def MoveEditXSecPnt(xsec_id, indx, new_pnt):
    return _vsp_g.MoveEditXSecPnt(xsec_id, indx, new_pnt)

@test_wrap
def ConvertXSecToEdit(geom_id, indx=0):
    return _vsp_g.ConvertXSecToEdit(geom_id, indx)

@test_wrap
def GetEditXSecFixedUVec(xsec_id):
    return _vsp_g.GetEditXSecFixedUVec(xsec_id)

@test_wrap
def SetEditXSecFixedUVec(xsec_id, fixed_u_vec):
    return _vsp_g.SetEditXSecFixedUVec(xsec_id, fixed_u_vec)

@test_wrap
def ReparameterizeEditXSec(xsec_id):
    return _vsp_g.ReparameterizeEditXSec(xsec_id)

@test_wrap
def GetNumSets():
    return _vsp_g.GetNumSets()

@test_wrap
def SetSetName(index, name):
    return _vsp_g.SetSetName(index, name)

@test_wrap
def GetSetName(index):
    return _vsp_g.GetSetName(index)

@test_wrap
def GetGeomSetAtIndex(index):
    return _vsp_g.GetGeomSetAtIndex(index)

@test_wrap
def GetGeomSet(name):
    return _vsp_g.GetGeomSet(name)

@test_wrap
def GetSetIndex(name):
    return _vsp_g.GetSetIndex(name)

@test_wrap
def GetSetFlag(geom_id, set_index):
    return _vsp_g.GetSetFlag(geom_id, set_index)

@test_wrap
def SetSetFlag(geom_id, set_index, flag):
    return _vsp_g.SetSetFlag(geom_id, set_index, flag)

@test_wrap
def CopyPasteSet(copyIndex, pasteIndex):
    return _vsp_g.CopyPasteSet(copyIndex, pasteIndex)

@test_wrap
def ScaleSet(set_index, scale):
    return _vsp_g.ScaleSet(set_index, scale)

@test_wrap
def RotateSet(set_index, x_rot_deg, y_rot_deg, z_rot_deg):
    return _vsp_g.RotateSet(set_index, x_rot_deg, y_rot_deg, z_rot_deg)

@test_wrap
def TranslateSet(set_index, translation_vec):
    return _vsp_g.TranslateSet(set_index, translation_vec)

@test_wrap
def TransformSet(set_index, translation_vec, x_rot_deg, y_rot_deg, z_rot_deg, scale, scale_translations_flag):
    return _vsp_g.TransformSet(set_index, translation_vec, x_rot_deg, y_rot_deg, z_rot_deg, scale, scale_translations_flag)

@test_wrap
def ValidParm(id):
    return _vsp_g.ValidParm(id)

@test_wrap
def SetParmVal(*args):
    return _vsp_g.SetParmVal(*args)

@test_wrap
def SetParmValLimits(parm_id, val, lower_limit, upper_limit):
    return _vsp_g.SetParmValLimits(parm_id, val, lower_limit, upper_limit)

@test_wrap
def SetParmValUpdate(*args):
    return _vsp_g.SetParmValUpdate(*args)

@test_wrap
def GetParmVal(*args):
    return _vsp_g.GetParmVal(*args)

@test_wrap
def GetIntParmVal(parm_id):
    return _vsp_g.GetIntParmVal(parm_id)

@test_wrap
def GetBoolParmVal(parm_id):
    return _vsp_g.GetBoolParmVal(parm_id)

@test_wrap
def SetParmUpperLimit(parm_id, val):
    return _vsp_g.SetParmUpperLimit(parm_id, val)

@test_wrap
def GetParmUpperLimit(parm_id):
    return _vsp_g.GetParmUpperLimit(parm_id)

@test_wrap
def SetParmLowerLimit(parm_id, val):
    return _vsp_g.SetParmLowerLimit(parm_id, val)

@test_wrap
def GetParmLowerLimit(parm_id):
    return _vsp_g.GetParmLowerLimit(parm_id)

@test_wrap
def GetParmType(parm_id):
    return _vsp_g.GetParmType(parm_id)

@test_wrap
def GetParmName(parm_id):
    return _vsp_g.GetParmName(parm_id)

@test_wrap
def GetParmGroupName(parm_id):
    return _vsp_g.GetParmGroupName(parm_id)

@test_wrap
def GetParmDisplayGroupName(parm_id):
    return _vsp_g.GetParmDisplayGroupName(parm_id)

@test_wrap
def GetParmContainer(parm_id):
    return _vsp_g.GetParmContainer(parm_id)

@test_wrap
def SetParmDescript(parm_id, desc):
    return _vsp_g.SetParmDescript(parm_id, desc)

@test_wrap
def FindParm(parm_container_id, parm_name, group_name):
    return _vsp_g.FindParm(parm_container_id, parm_name, group_name)

@test_wrap
def FindContainers():
    return _vsp_g.FindContainers()

@test_wrap
def FindContainersWithName(name):
    return _vsp_g.FindContainersWithName(name)

@test_wrap
def FindContainer(name, index):
    return _vsp_g.FindContainer(name, index)

@test_wrap
def GetContainerName(parm_container_id):
    return _vsp_g.GetContainerName(parm_container_id)

@test_wrap
def FindContainerGroupNames(parm_container_id):
    return _vsp_g.FindContainerGroupNames(parm_container_id)

@test_wrap
def FindContainerParmIDs(parm_container_id):
    return _vsp_g.FindContainerParmIDs(parm_container_id)

@test_wrap
def GetVehicleID():
    return _vsp_g.GetVehicleID()

@test_wrap
def ComputeMinClearanceDistance(*args):
    return _vsp_g.ComputeMinClearanceDistance(*args)

@test_wrap
def SnapParm(*args):
    return _vsp_g.SnapParm(*args)

@test_wrap
def AddVarPresetGroup(group_name):
    return _vsp_g.AddVarPresetGroup(group_name)

@test_wrap
def AddVarPresetSetting(setting_name):
    return _vsp_g.AddVarPresetSetting(setting_name)

@test_wrap
def AddVarPresetParm(*args):
    return _vsp_g.AddVarPresetParm(*args)

@test_wrap
def EditVarPresetParm(*args):
    return _vsp_g.EditVarPresetParm(*args)

@test_wrap
def DeleteVarPresetParm(*args):
    return _vsp_g.DeleteVarPresetParm(*args)

@test_wrap
def SwitchVarPreset(group_name, setting_name):
    return _vsp_g.SwitchVarPreset(group_name, setting_name)

@test_wrap
def DeleteVarPresetSet(group_name, setting_name):
    return _vsp_g.DeleteVarPresetSet(group_name, setting_name)

@test_wrap
def GetCurrentGroupName():
    return _vsp_g.GetCurrentGroupName()

@test_wrap
def GetCurrentSettingName():
    return _vsp_g.GetCurrentSettingName()

@test_wrap
def GetVarPresetGroupNames():
    return _vsp_g.GetVarPresetGroupNames()

@test_wrap
def GetVarPresetSettingNamesWName(group_name):
    return _vsp_g.GetVarPresetSettingNamesWName(group_name)

@test_wrap
def GetVarPresetSettingNamesWIndex(group_index):
    return _vsp_g.GetVarPresetSettingNamesWIndex(group_index)

@test_wrap
def GetVarPresetParmVals():
    return _vsp_g.GetVarPresetParmVals()

@test_wrap
def GetVarPresetParmValsWNames(group_name, setting_name):
    return _vsp_g.GetVarPresetParmValsWNames(group_name, setting_name)

@test_wrap
def GetVarPresetParmIDs():
    return _vsp_g.GetVarPresetParmIDs()

@test_wrap
def GetVarPresetParmIDsWName(group_name):
    return _vsp_g.GetVarPresetParmIDsWName(group_name)

@test_wrap
def SetPCurve(geom_id, pcurveid, tvec, valvec, newtype):
    return _vsp_g.SetPCurve(geom_id, pcurveid, tvec, valvec, newtype)

@test_wrap
def PCurveConvertTo(geom_id, pcurveid, newtype):
    return _vsp_g.PCurveConvertTo(geom_id, pcurveid, newtype)

@test_wrap
def PCurveGetType(geom_id, pcurveid):
    return _vsp_g.PCurveGetType(geom_id, pcurveid)

@test_wrap
def PCurveGetTVec(geom_id, pcurveid):
    return _vsp_g.PCurveGetTVec(geom_id, pcurveid)

@test_wrap
def PCurveGetValVec(geom_id, pcurveid):
    return _vsp_g.PCurveGetValVec(geom_id, pcurveid)

@test_wrap
def PCurveDeletePt(geom_id, pcurveid, indx):
    return _vsp_g.PCurveDeletePt(geom_id, pcurveid, indx)

@test_wrap
def PCurveSplit(geom_id, pcurveid, tsplit):
    return _vsp_g.PCurveSplit(geom_id, pcurveid, tsplit)

@test_wrap
def ApproximateAllPropellerPCurves(geom_id):
    return _vsp_g.ApproximateAllPropellerPCurves(geom_id)

@test_wrap
def ResetPropellerThicknessCurve(geom_id):
    return _vsp_g.ResetPropellerThicknessCurve(geom_id)

@test_wrap
def AutoGroupVSPAEROControlSurfaces():
    return _vsp_g.AutoGroupVSPAEROControlSurfaces()

@test_wrap
def CreateVSPAEROControlSurfaceGroup():
    return _vsp_g.CreateVSPAEROControlSurfaceGroup()

@test_wrap
def AddAllToVSPAEROControlSurfaceGroup(CSGroupIndex):
    return _vsp_g.AddAllToVSPAEROControlSurfaceGroup(CSGroupIndex)

@test_wrap
def RemoveAllFromVSPAEROControlSurfaceGroup(CSGroupIndex):
    return _vsp_g.RemoveAllFromVSPAEROControlSurfaceGroup(CSGroupIndex)

@test_wrap
def GetActiveCSNameVec(CSGroupIndex):
    return _vsp_g.GetActiveCSNameVec(CSGroupIndex)

@test_wrap
def GetCompleteCSNameVec():
    return _vsp_g.GetCompleteCSNameVec()

@test_wrap
def GetAvailableCSNameVec(CSGroupIndex):
    return _vsp_g.GetAvailableCSNameVec(CSGroupIndex)

@test_wrap
def SetVSPAEROControlGroupName(name, CSGroupIndex):
    return _vsp_g.SetVSPAEROControlGroupName(name, CSGroupIndex)

@test_wrap
def GetVSPAEROControlGroupName(CSGroupIndex):
    return _vsp_g.GetVSPAEROControlGroupName(CSGroupIndex)

@test_wrap
def AddSelectedToCSGroup(selected, CSGroupIndex):
    return _vsp_g.AddSelectedToCSGroup(selected, CSGroupIndex)

@test_wrap
def RemoveSelectedFromCSGroup(selected, CSGroupIndex):
    return _vsp_g.RemoveSelectedFromCSGroup(selected, CSGroupIndex)

@test_wrap
def GetNumControlSurfaceGroups():
    return _vsp_g.GetNumControlSurfaceGroups()

@test_wrap
def FindActuatorDisk(disk_index):
    return _vsp_g.FindActuatorDisk(disk_index)

@test_wrap
def GetNumActuatorDisks():
    return _vsp_g.GetNumActuatorDisks()

@test_wrap
def FindUnsteadyGroup(group_index):
    return _vsp_g.FindUnsteadyGroup(group_index)

@test_wrap
def GetUnsteadyGroupName(group_index):
    return _vsp_g.GetUnsteadyGroupName(group_index)

@test_wrap
def GetUnsteadyGroupCompIDs(group_index):
    return _vsp_g.GetUnsteadyGroupCompIDs(group_index)

@test_wrap
def GetUnsteadyGroupSurfIndexes(group_index):
    return _vsp_g.GetUnsteadyGroupSurfIndexes(group_index)

@test_wrap
def GetNumUnsteadyGroups():
    return _vsp_g.GetNumUnsteadyGroups()

@test_wrap
def GetNumUnsteadyRotorGroups():
    return _vsp_g.GetNumUnsteadyRotorGroups()

@test_wrap
def AddExcrescence(excresName, excresType, excresVal):
    return _vsp_g.AddExcrescence(excresName, excresType, excresVal)

@test_wrap
def DeleteExcrescence(index):
    return _vsp_g.DeleteExcrescence(index)

@test_wrap
def UpdateParasiteDrag():
    return _vsp_g.UpdateParasiteDrag()

@test_wrap
def WriteAtmosphereCSVFile(file_name, atmos_type):
    return _vsp_g.WriteAtmosphereCSVFile(file_name, atmos_type)

@test_wrap
def CalcAtmosphere(alt, delta_temp, atmos_type, temp, pres, pres_ratio, rho_ratio):
    return _vsp_g.CalcAtmosphere(alt, delta_temp, atmos_type, temp, pres, pres_ratio, rho_ratio)

@test_wrap
def WriteBodyFFCSVFile(file_name):
    return _vsp_g.WriteBodyFFCSVFile(file_name)

@test_wrap
def WriteWingFFCSVFile(file_name):
    return _vsp_g.WriteWingFFCSVFile(file_name)

@test_wrap
def WriteCfEqnCSVFile(file_name):
    return _vsp_g.WriteCfEqnCSVFile(file_name)

@test_wrap
def WritePartialCfMethodCSVFile(file_name):
    return _vsp_g.WritePartialCfMethodCSVFile(file_name)

@test_wrap
def CompPnt01(geom_id, surf_indx, u, w):
    return _vsp_g.CompPnt01(geom_id, surf_indx, u, w)

@test_wrap
def CompNorm01(geom_id, surf_indx, u, w):
    return _vsp_g.CompNorm01(geom_id, surf_indx, u, w)

@test_wrap
def CompTanU01(geom_id, surf_indx, u, w):
    return _vsp_g.CompTanU01(geom_id, surf_indx, u, w)

@test_wrap
def CompTanW01(geom_id, surf_indx, u, w):
    return _vsp_g.CompTanW01(geom_id, surf_indx, u, w)

@test_wrap
def CompCurvature01(geom_id, surf_indx, u, w):
    return _vsp_g.CompCurvature01(geom_id, surf_indx, u, w)

@test_wrap
def ProjPnt01(geom_id, surf_indx, pt):
    return _vsp_g.ProjPnt01(geom_id, surf_indx, pt)

@test_wrap
def ProjPnt01I(geom_id, pt):
    return _vsp_g.ProjPnt01I(geom_id, pt)

@test_wrap
def ProjPnt01Guess(geom_id, surf_indx, pt, u0, w0):
    return _vsp_g.ProjPnt01Guess(geom_id, surf_indx, pt, u0, w0)

@test_wrap
def AxisProjPnt01(geom_id, surf_indx, iaxis, pt, p_out):
    return _vsp_g.AxisProjPnt01(geom_id, surf_indx, iaxis, pt, p_out)

@test_wrap
def AxisProjPnt01I(geom_id, iaxis, pt, p_out):
    return _vsp_g.AxisProjPnt01I(geom_id, iaxis, pt, p_out)

@test_wrap
def AxisProjPnt01Guess(geom_id, surf_indx, iaxis, pt, u0, w0, p_out):
    return _vsp_g.AxisProjPnt01Guess(geom_id, surf_indx, iaxis, pt, u0, w0, p_out)

@test_wrap
def InsideSurf(geom_id, surf_indx, pt):
    return _vsp_g.InsideSurf(geom_id, surf_indx, pt)

@test_wrap
def CompPntRST(geom_id, surf_indx, r, s, t):
    return _vsp_g.CompPntRST(geom_id, surf_indx, r, s, t)

@test_wrap
def FindRST(geom_id, surf_indx, pt):
    return _vsp_g.FindRST(geom_id, surf_indx, pt)

@test_wrap
def FindRSTGuess(geom_id, surf_indx, pt, r0, s0, t0):
    return _vsp_g.FindRSTGuess(geom_id, surf_indx, pt, r0, s0, t0)

@test_wrap
def ConvertRSTtoLMN(geom_id, surf_indx, r, s, t, l, m, n):
    return _vsp_g.ConvertRSTtoLMN(geom_id, surf_indx, r, s, t, l, m, n)

@test_wrap
def ConvertLMNtoRST(geom_id, surf_indx, l, m, n, r, s, t):
    return _vsp_g.ConvertLMNtoRST(geom_id, surf_indx, l, m, n, r, s, t)

@test_wrap
def CompVecPnt01(geom_id, surf_indx, u_in_vec, w_in_vec):
    return _vsp_g.CompVecPnt01(geom_id, surf_indx, u_in_vec, w_in_vec)

@test_wrap
def CompVecNorm01(geom_id, surf_indx, us, ws):
    return _vsp_g.CompVecNorm01(geom_id, surf_indx, us, ws)

@test_wrap
def CompVecCurvature01(geom_id, surf_indx, us, ws):
    return _vsp_g.CompVecCurvature01(geom_id, surf_indx, us, ws)

@test_wrap
def ProjVecPnt01(geom_id, surf_indx, pts):
    return _vsp_g.ProjVecPnt01(geom_id, surf_indx, pts)

@test_wrap
def ProjVecPnt01Guess(geom_id, surf_indx, pts, u0s, w0s):
    return _vsp_g.ProjVecPnt01Guess(geom_id, surf_indx, pts, u0s, w0s)

@test_wrap
def AxisProjVecPnt01(geom_id, surf_indx, iaxis, pts, pt_out_vec):
    return _vsp_g.AxisProjVecPnt01(geom_id, surf_indx, iaxis, pts, pt_out_vec)

@test_wrap
def AxisProjVecPnt01Guess(geom_id, surf_indx, iaxis, pts, u0s, w0s, pt_out_vec):
    return _vsp_g.AxisProjVecPnt01Guess(geom_id, surf_indx, iaxis, pts, u0s, w0s, pt_out_vec)

@test_wrap
def VecInsideSurf(geom_id, surf_indx, pts):
    return _vsp_g.VecInsideSurf(geom_id, surf_indx, pts)

@test_wrap
def CompVecPntRST(geom_id, surf_indx, r_in_vec, s_in_vec, t_in_vec):
    return _vsp_g.CompVecPntRST(geom_id, surf_indx, r_in_vec, s_in_vec, t_in_vec)

@test_wrap
def FindRSTVec(geom_id, surf_indx, pts):
    return _vsp_g.FindRSTVec(geom_id, surf_indx, pts)

@test_wrap
def FindRSTVecGuess(geom_id, surf_indx, pts, r0s, s0s, t0s):
    return _vsp_g.FindRSTVecGuess(geom_id, surf_indx, pts, r0s, s0s, t0s)

@test_wrap
def ConvertRSTtoLMNVec(geom_id, surf_indx, r_vec, s_vec, t_vec):
    return _vsp_g.ConvertRSTtoLMNVec(geom_id, surf_indx, r_vec, s_vec, t_vec)

@test_wrap
def ConvertLMNtoRSTVec(geom_id, surf_indx, l_vec, m_vec, n_vec):
    return _vsp_g.ConvertLMNtoRSTVec(geom_id, surf_indx, l_vec, m_vec, n_vec)

@test_wrap
def GetUWTess01(geom_id, surf_indx):
    return _vsp_g.GetUWTess01(geom_id, surf_indx)

@test_wrap
def AddRuler(startgeomid, startsurfindx, startu, startw, endgeomid, endsurfindx, endu, endw, name):
    return _vsp_g.AddRuler(startgeomid, startsurfindx, startu, startw, endgeomid, endsurfindx, endu, endw, name)

@test_wrap
def GetAllRulers():
    return _vsp_g.GetAllRulers()

@test_wrap
def DelRuler(id):
    return _vsp_g.DelRuler(id)

@test_wrap
def DeleteAllRulers():
    return _vsp_g.DeleteAllRulers()

@test_wrap
def AddProbe(geomid, surfindx, u, w, name):
    return _vsp_g.AddProbe(geomid, surfindx, u, w, name)

@test_wrap
def GetAllProbes():
    return _vsp_g.GetAllProbes()

@test_wrap
def DelProbe(id):
    return _vsp_g.DelProbe(id)

@test_wrap
def DeleteAllProbes():
    return _vsp_g.DeleteAllProbes()

@test_wrap
def AddVec3D(INOUT, x, y, z):
    return _vsp_g.AddVec3D(INOUT, x, y, z)

@test_wrap
def dist(a, b):
    return _vsp_g.dist(a, b)

@test_wrap
def dist_squared(a, b):
    return _vsp_g.dist_squared(a, b)

@test_wrap
def dot(a, b):
    return _vsp_g.dot(a, b)

@test_wrap
def cross(a, b):
    return _vsp_g.cross(a, b)

@test_wrap
def angle(a, b):
    return _vsp_g.angle(a, b)

@test_wrap
def signed_angle(a, b, ref):
    return _vsp_g.signed_angle(a, b, ref)

@test_wrap
def cos_angle(a, b):
    return _vsp_g.cos_angle(a, b)

@test_wrap
def radius_of_circle(p1, p2, p3):
    return _vsp_g.radius_of_circle(p1, p2, p3)

@test_wrap
def center_of_circle(p1, p2, p3, center):
    return _vsp_g.center_of_circle(p1, p2, p3, center)

@test_wrap
def dist_pnt_2_plane(org, norm, pnt):
    return _vsp_g.dist_pnt_2_plane(org, norm, pnt)

@test_wrap
def dist_pnt_2_line(line_pt1, line_pt2, pnt):
    return _vsp_g.dist_pnt_2_line(line_pt1, line_pt2, pnt)

@test_wrap
def proj_pnt_on_line_seg(line_pt1, line_pt2, pnt):
    return _vsp_g.proj_pnt_on_line_seg(line_pt1, line_pt2, pnt)

@test_wrap
def proj_pnt_on_ray(line_pt1, line_pt2, pnt):
    return _vsp_g.proj_pnt_on_ray(line_pt1, line_pt2, pnt)

@test_wrap
def proj_pnt_on_line(line_pt1, line_pt2, pnt):
    return _vsp_g.proj_pnt_on_line(line_pt1, line_pt2, pnt)

@test_wrap
def proj_pnt_to_plane(org, plane_ln1, plane_ln2, pnt):
    return _vsp_g.proj_pnt_to_plane(org, plane_ln1, plane_ln2, pnt)

@test_wrap
def proj_vec_to_plane(vec, norm):
    return _vsp_g.proj_vec_to_plane(vec, norm)

@test_wrap
def tri_seg_intersect(A, B, C, D, E, u, w, t):
    return _vsp_g.tri_seg_intersect(A, B, C, D, E, u, w, t)

@test_wrap
def tri_ray_intersect(A, B, C, D, E, u, w, t):
    return _vsp_g.tri_ray_intersect(A, B, C, D, E, u, w, t)

@test_wrap
def plane_ray_intersect(*args):
    return _vsp_g.plane_ray_intersect(*args)

@test_wrap
def ray_ray_intersect(A, B, C, D, int_pnt1, int_pnt2):
    return _vsp_g.ray_ray_intersect(A, B, C, D, int_pnt1, int_pnt2)

@test_wrap
def tetra_volume(A, B, C):
    return _vsp_g.tetra_volume(A, B, C)

@test_wrap
def area(A, B, C):
    return _vsp_g.area(A, B, C)

@test_wrap
def poly_area(pnt_vec):
    return _vsp_g.poly_area(pnt_vec)

@test_wrap
def dist3D_Segment_to_Segment(*args):
    return _vsp_g.dist3D_Segment_to_Segment(*args)

@test_wrap
def nearSegSeg(L0, L1, S0, S1, Lt, Ln, St, Sn):
    return _vsp_g.nearSegSeg(L0, L1, S0, S1, Lt, Ln, St, Sn)

@test_wrap
def pointLineDistSquared(p, lp0, lp1, t):
    return _vsp_g.pointLineDistSquared(p, lp0, lp1, t)

@test_wrap
def pointSegDistSquared(p, sp0, sp1, t):
    return _vsp_g.pointSegDistSquared(p, sp0, sp1, t)

@test_wrap
def point_on_line(lp0, lp1, t):
    return _vsp_g.point_on_line(lp0, lp1, t)

@test_wrap
def MapToPlane(p, planeOrig, planeVec1, planeVec2):
    return _vsp_g.MapToPlane(p, planeOrig, planeVec1, planeVec2)

@test_wrap
def MapFromPlane(uw, planeOrig, planeVec1, planeVec2):
    return _vsp_g.MapFromPlane(uw, planeOrig, planeVec1, planeVec2)

@test_wrap
def plane_half_space(planeOrig, planeNorm, pnt):
    return _vsp_g.plane_half_space(planeOrig, planeNorm, pnt)

@test_wrap
def line_line_intersect(p1, p2, p3, p4, s, t):
    return _vsp_g.line_line_intersect(p1, p2, p3, p4, s, t)

@test_wrap
def RotateArbAxis(p, theta, r):
    return _vsp_g.RotateArbAxis(p, theta, r)

@test_wrap
def BarycentricWeights(v0, v1, v2, p):
    return _vsp_g.BarycentricWeights(v0, v1, v2, p)

@test_wrap
def BilinearWeights(p0, p1, p, weights):
    return _vsp_g.BilinearWeights(p0, p1, p, weights)

@test_wrap
def tri_tri_min_dist(v0, v1, v2, v3, v4, v5):
    return _vsp_g.tri_tri_min_dist(v0, v1, v2, v3, v4, v5)

@test_wrap
def pnt_tri_min_dist(v0, v1, v2, pnt):
    return _vsp_g.pnt_tri_min_dist(v0, v1, v2, pnt)

@test_wrap
def slerp(a, b, t):
    return _vsp_g.slerp(a, b, t)


@test_wrap
def to_string(v):
    return _vsp_g.to_string(v)